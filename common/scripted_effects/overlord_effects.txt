@resolution_flag_timer = 360

admirals_bickering_event_effect = { # Set values, and check if we are done with the random events in the middle of the event chain
	hidden_effect = {
		change_variable = {
			which = overlord_admirals_bickering_value
			value = 1
		}
		if = {
			limit = {
				check_variable = {
					which = overlord_admirals_bickering_value
					value <= 3
				}
			}
			country_event = {
				id = subject.1117
				days = 150
			}
		}
		else = {
			country_event = {
				id = subject.1142
				days = 150
			}
		}
	}
}

admirals_bickering_replacement_effect = { # Check that we have both admirals we need for the event chain story
	hidden_effect = {
		if = { # Check if you have any 'democratic admiral'
			limit = {
				OR = {
					NOT = { exists = event_target:admiral_democracy }
					NOT = {
						any_owned_leader = {
							has_leader_flag = admiral_democracy
							leader_class = admiral
						}
					}
				}
			}
			if = { # If not, check if there are any available admirals who aren't used for the other side
				limit = {
					any_owned_leader = {
						NOT = { has_leader_flag = admiral_oligarchy }
						leader_class = admiral
					}
				}
				random_owned_leader = {
					limit = {
						NOT = { has_leader_flag = admiral_oligarchy }
						leader_class = admiral
					}
					set_leader_flag = admiral_democracy
					save_event_target_as = admiral_democracy
				}
			}
			else = { # If not, create a new skill 1 admiral that will take place for the democratic side
				create_leader = {
					class = admiral
					species = root.species
					name = random
					skill = 1
				}
				last_created_leader = {
					set_leader_flag = admiral_democracy
					save_event_target_as = admiral_democracy
				}
			}
		}
		if = { # Check if you have any 'oligarchic admiral'
			limit = {
				OR = {
					NOT = { exists = event_target:admiral_oligarchy }
					NOT = {
						any_owned_leader = {
							has_leader_flag = admiral_oligarchy
							leader_class = admiral
						}
					}
				}
			}
			if = { # If not, check if there are any available admirals who aren't used for the other side
				limit = {
					any_owned_leader = {
						NOT = { has_leader_flag = admiral_democracy }
						leader_class = admiral
					}
				}
				random_owned_leader = {
					limit = {
						NOT = { has_leader_flag = admiral_democracy }
						leader_class = admiral
					}
					set_leader_flag = admiral_oligarchy
					save_event_target_as = admiral_oligarchy
				}
			}
			else = { # If not, create a new skill 1 admiral that will take place for the oligarchic side
				create_leader = {
					class = admiral
					species = root.species
					name = random
					skill = 1
				}
				last_created_leader = {
					set_leader_flag = admiral_oligarchy
					save_event_target_as = admiral_oligarchy
				}
			}
		}
	}
}

admirals_bickering_increase_democratic_influence_effect = { # Increase Democratic by 5
	change_variable = {
		which = overlord_admirals_bickering_democratic_side
		value = 5
	}
}

admirals_bickering_decrease_democratic_influence_effect = { # Decrease Democratic by 5
	subtract_variable = {
		which = overlord_admirals_bickering_democratic_side
		value = 5
	}
}

admirals_bickering_increase_oligarchic_influence_effect = { # Increase Oligarchic by 5
	change_variable = {
		which = overlord_admirals_bickering_oligarchic_side
		value = 5
	}
}

admirals_bickering_decrease_oligarchic_influence_effect = { # Decrease Oligarchic by 5
	subtract_variable = {
		which = overlord_admirals_bickering_oligarchic_side
		value = 5
	}
}

experiments_scientist_replacement_effect = { # Check that we have both admirals we need for the event chain story
	hidden_effect = {
		if = { # Check if you have any scientist at hand
			limit = {
				is_gestalt = no
				OR = {
					NOT = { exists = event_target:targeted_scientist }
					NOT = {
						any_owned_leader = {
							has_leader_flag = experiments_scientist
							leader_class = scientist
						}
					}
				}
			}
			if = { # If not, check if there are any available scientists
				limit = {
					count_owned_leader = {
						count >= 1
						limit = {
							leader_class = scientist
						}
					}
				}
				random_owned_leader = {
					limit = {
						leader_class = scientist
					}
					set_leader_flag = experiments_scientist
					save_event_target_as = targeted_scientist
				}
			}
			else = { # If not, create a new skill 1 scientist that can take the role
				create_leader = {
					class = scientist
					species = root.species
					name = random
					skill = 1
				}
				last_created_leader = {
					set_leader_flag = experiments_scientist
					save_event_target_as = targeted_scientist
				}
			}
		}
	}
}

experiments_kill_pop_effect = { # Research demands sacrifice (kills 1 pop in capital if possible)
	capital_scope = {
		if = {
			limit = {
				count_owned_pop = {
					count > 1
					limit = {
						is_same_species = root.species
					}
				}
			}
			random_owned_pop = {
				limit = {
					is_same_species = root.species
				}
				kill_pop = yes
			}
		}
	}
}

experiments_scientist_skill_effect = { # Gives skill to the scientist in charge, if you are not gestalt
	if = {
		limit = {
			is_gestalt = no
		}
		event_target:targeted_scientist = {
			add_skill = 1
		}
	}
}

#######################
# SPECIALIST SUBJECTS #
#######################

add_specialist_leaders = {
	every_pool_leader = {
		add_specialist_trait_to_leader_in_pool = {
			TYPE = $TYPE$
			CLASS = $CLASS$
		}
	}
	every_owned_leader = {
		add_specialist_trait_to_leader = {
			TYPE = $TYPE$
			CLASS = $CLASS$
		}
	}
}

add_specialist_trait_to_leader_in_pool = {
	if = {
		limit = {
			leader_class = $CLASS$
			NOT = { has_leader_flag = $TYPE$_$CLASS$ }
		}
		add_skill = 1
		add_$TYPE$_leader_trait = yes
		set_leader_flag = $TYPE$_$CLASS$
	}
}

add_specialist_trait_to_leader = {
	if = {
		limit = {
			leader_class = $CLASS$
			NOT = { has_leader_flag = $TYPE$_$CLASS$ }
		}
		add_$TYPE$_leader_trait = yes
		set_leader_flag = $TYPE$_$CLASS$
	}
}

remove_specialist_leaders = {
	every_pool_leader = {
		limit = {
			leader_class = $CLASS$
			has_leader_flag = $TYPE$_$CLASS$
		}
		if = {
			limit = { has_skill > 1 }
			add_skill = -1
		}
		remove_$TYPE$_leader_trait = yes
		remove_leader_flag = $TYPE$_$CLASS$
	}
}

append_technology = {
	if = {
		limit = {
			NOR = {
				has_technology = tech_$TECH$
				has_tech_option = tech_$TECH$
			}
		}
		add_research_option = tech_$TECH$
	}
}


refresh_subject_count_loyalty_penalty = {
	every_subject = {
		erase_modifier = { MOD = divided_patronage }
	}
	if = {
		limit = {
			NOR = {
				has_civic = civic_feudal_realm
				has_civic = civic_coalition_government
				has_civic = civic_aristocratic_elite
				has_civic = civic_franchising
				has_origin = origin_secondary_hegemon
				has_ascension_perk = ap_shared_destiny
				AND = {
					is_galactic_emperor = yes
					has_federation = yes
					federation = { has_federation_perk = imperium_provinces }
				}
			}
			subjects > 1
		}
		set_variable = { which = subjects_minus_one value = trigger:subjects }
		subtract_variable = { which = subjects_minus_one value = 1 }
		every_subject = {
			add_modifier = {
				modifier = divided_patronage
				multiplier = PREV.subjects_minus_one
			}
		}
		clear_variable = subjects_minus_one
	}
}

add_ethics_compatibility_modifier = {
	set_variable = {
		which = ethics_compatibility_factor
		value = 0
	}
	if = { limit = { is_pacifist = yes }		compare_and_modify_ethics_factor = { SAME = pacifist OPP = militarist } }
	if = { limit = { is_militarist = yes }		compare_and_modify_ethics_factor = { SAME = militarist OPP = pacifist } }
	if = { limit = { is_egalitarian = yes }		compare_and_modify_ethics_factor = { SAME = egalitarian OPP = authoritarian } }
	if = { limit = { is_authoritarian = yes }	compare_and_modify_ethics_factor = { SAME = authoritarian OPP = egalitarian } }
	if = { limit = { is_xenophile = yes }		compare_and_modify_ethics_factor = { SAME = xenophile OPP = xenophobe } }
	if = { limit = { is_xenophobe = yes }		compare_and_modify_ethics_factor = { SAME = xenophobe OPP = xenophile } }
	if = { limit = { is_materialist = yes }		compare_and_modify_ethics_factor = { SAME = materialist OPP = spiritualist } }
	if = { limit = { is_spiritualist = yes }	compare_and_modify_ethics_factor = { SAME = spiritualist OPP = materialist } }
	if = { limit = { is_socialism = yes }		compare_and_modify_ethics_factor = { SAME = socialism OPP = capitalism } }
	if = { limit = { is_capitalism = yes }	compare_and_modify_ethics_factor = { SAME = capitalism OPP = socialism } }
	if = {
		limit = { NOT = { check_variable = { which = ethics_compatibility_factor value = 0 } } }
		add_modifier = {
			modifier = overlord_ethics_compatibility
			multiplier = ethics_compatibility_factor
		}
	}
	clear_variable = ethics_compatibility_factor
}

compare_and_modify_ethics_factor = {
	ROOT.owner = {
		switch = {
			trigger = has_ethic
			ethic_fanatic_$SAME$ =	{ PREV = { change_variable =	{ which = ethics_compatibility_factor value = 1 } } }
			ethic_$SAME$ =			{ PREV = { change_variable =	{ which = ethics_compatibility_factor value = 1 } } }
			ethic_fanatic_$OPP$ =	{ PREV = { subtract_variable =	{ which = ethics_compatibility_factor value = 3 } } }
			ethic_$OPP$ =			{ PREV = { subtract_variable =	{ which = ethics_compatibility_factor value = 2 } } }
		}
	}
}

erase_modifier = {
	if = {
		limit = { has_modifier = $MOD$ }
		remove_modifier = $MOD$
	}
}

######################
# BULWARK SPECIALIST #
######################

add_bulwark_array = {
	fleet = {
		every_controlled_ship = {
			limit = {
				is_ship_class = shipclass_starbase
				NOT = { has_component = "STARBASE_AURA_BULWARK_ARRAY" }
			}
			starbase = {
				add_starbase_component = {
			        component = "STARBASE_AURA_BULWARK_ARRAY"
			    }
			}
		}
	}
}

remove_bulwark_array = {
	fleet = {
		every_controlled_ship = {
			limit = {
				is_ship_class = shipclass_starbase
				has_component = "STARBASE_AURA_BULWARK_ARRAY"
			}
			starbase = {
				remove_starbase_component = {
			        component = "STARBASE_AURA_BULWARK_ARRAY"
			    }
			}
		}
	}
}

add_disintegrator_field = {
	fleet = {
		every_controlled_ship = {
			limit = {
				is_ship_class = shipclass_starbase
			}
			if = {
				limit = { owner = { has_country_flag = finished_unyielding_tree } }
				if = {
					limit = { NOT = { has_component = "STARBASE_AURA_MEGA_DISINTEGRATOR_FIELD" } }
					starbase = {
						add_starbase_component = {
					        component = "STARBASE_AURA_MEGA_DISINTEGRATOR_FIELD"
					    }
					}
				}
			}
			else_if = {
				limit = { NOT = { has_component = "STARBASE_AURA_DISINTEGRATOR_FIELD" } }
				starbase = {
					add_starbase_component = {
				        component = "STARBASE_AURA_DISINTEGRATOR_FIELD"
				    }
				}
			}
		}
	}
}

remove_disintegrator_field = {
	fleet = {
		every_controlled_ship = {
			limit = { is_ship_class = shipclass_starbase }
			if = {
				limit = { has_component = "STARBASE_AURA_DISINTEGRATOR_FIELD" }
				starbase = {
					remove_starbase_component = {
				        component = "STARBASE_AURA_DISINTEGRATOR_FIELD"
				    }
				}
			}
			else_if = {
				limit = { has_component = "STARBASE_AURA_MEGA_DISINTEGRATOR_FIELD" }
				starbase = {
					remove_starbase_component = {
				        component = "STARBASE_AURA_MEGA_DISINTEGRATOR_FIELD"
				    }
				}
			}
		}
	}
}

add_bulwark_leader_trait = {
	random_list = {
		1 = { add_trait = leader_trait_bulwark_watcher }
		1 = { add_trait = leader_trait_bulwark_retaliator }
		1 = { add_trait = leader_trait_bulwark_sentinel }
	}
}

remove_bulwark_leader_trait = {
	if = {
		limit = { has_trait = leader_trait_bulwark_watcher }
		remove_trait = leader_trait_bulwark_watcher
	}
	else_if = {
		limit = { has_trait = leader_trait_bulwark_retaliator }
		remove_trait = leader_trait_bulwark_retaliator
	}
	else = {
		remove_trait = leader_trait_bulwark_sentinel
	}
}

#########################
# SCHOLARIUM SPECIALIST #
#########################

add_scholarium_leader_trait = {
	random_list = {
		1 = { add_trait = leader_trait_scholarium_investigator }
		1 = { add_trait = leader_trait_scholarium_explorer }
		1 = { add_trait = leader_trait_scholarium_observer }
	}
}

remove_scholarium_leader_trait = {
	if = {
		limit = { has_trait = leader_trait_scholarium_investigator }
		remove_trait = leader_trait_scholarium_investigator
	}
	else_if = {
		limit = { has_trait = leader_trait_scholarium_explorer }
		remove_trait = leader_trait_scholarium_explorer
	}
	else = {
		remove_trait = leader_trait_scholarium_observer
	}
}

reset_scholarium_timer = {
	if = {
		limit = { is_variable_set = planetary_sensor_timer }
		clear_variable = planetary_sensor_timer
	}
	random_list = {
		1 = { set_variable = { which = planetary_sensor_timer value = 4 } }
		1 = { set_variable = { which = planetary_sensor_timer value = 5 } }
		1 = { set_variable = { which = planetary_sensor_timer value = 6 } }
	}
}

trigger_scholarium_project_event = {
	random_planet_within_border = {
		limit = {
			valid_for_scholarium_sensors = yes
		}
		save_event_target_as = planetary_sensor_target
	}
	country_event = {
		id = specialist.900
		scopes = { FROM = event_target:planetary_sensor_target }
	}
}

add_scholarium_research = {
	if = {
		limit = {
			is_specialist_subject_tier = {
				TYPE = scholarium
				TIER = 3
			}
			has_tradition = tr_discovery_finish
			is_galactic_community_member = yes
			is_active_resolution = resolution_intergalacticdirective_a_voice_for_all
		}
		add_resource = {
			$TYPE$_research = 6000
		}
	}
	else_if = {
		limit = {
			is_specialist_subject_tier = {
				TYPE = scholarium
				TIER = 3
			}
			has_tradition = tr_discovery_finish
		}
		add_resource = {
			$TYPE$_research = 4000
		}
	}
	else_if = {
		limit = {
			is_specialist_subject_tier = {
				TYPE = scholarium
				TIER = 2
			}
			is_galactic_community_member = yes
			is_active_resolution = resolution_intergalacticdirective_a_voice_for_all
		}
		add_resource = {
			$TYPE$_research = 4500
		}
	}
	else_if = {
		limit = {
			is_specialist_subject_tier = {
				TYPE = scholarium
				TIER = 2
			}
		}
		add_resource = {
			$TYPE$_research = 3000
		}
	}
	else_if = {
		limit = {
			is_specialist_subject_tier = {
				TYPE = scholarium
				TIER = 1
			}
			is_galactic_community_member = yes
			is_active_resolution = resolution_intergalacticdirective_a_voice_for_all
		}
		add_resource = {
			$TYPE$_research = 3000
		}
	}
	else = {
		add_resource = {
			$TYPE$_research = 2000
		}
	}
}

############################
# PROSPECTORIUM SPECIALIST #
############################

add_prospectorium_leader_trait = {
	random_list = {
		1 = { add_trait = leader_trait_prospectorium_extractor }
		1 = { add_trait = leader_trait_prospectorium_optimizer }
		1 = { add_trait = leader_trait_prospectorium_refiner }
	}
}

remove_prospectorium_leader_trait = {
	if = {
		limit = { has_trait = leader_trait_prospectorium_extractor }
		remove_trait = leader_trait_prospectorium_extractor
	}
	else_if = {
		limit = { has_trait = leader_trait_prospectorium_optimizer }
		remove_trait = leader_trait_prospectorium_optimizer
	}
	else = {
		remove_trait = leader_trait_prospectorium_refiner
	}
}

prospectorium_resource_discovery_flag_tier_2_effect = {
	random_list = {
		1 = {
			modifier = {
				factor = 0
				has_country_flag = prospectorium_resource_discovery_energy
			}
			set_country_flag = prospectorium_resource_discovery_energy
		}
		1 = {
			modifier = {
				factor = 0
				has_country_flag = prospectorium_resource_discovery_minerals
			}
			set_country_flag = prospectorium_resource_discovery_minerals
		}
	}
	set_country_flag = prospectorium_resource_discovery_alloys
	random_list = {
		1 = {
			modifier = {
				factor = 0
				has_country_flag = prospectorium_resource_discovery_rare_crystals
			}
			set_country_flag = prospectorium_resource_discovery_rare_crystals
		}
		1 = {
			modifier = {
				factor = 0
				has_country_flag = prospectorium_resource_discovery_volatile_motes
			}
			set_country_flag = prospectorium_resource_discovery_volatile_motes
		}
		1 = {
			modifier = {
				factor = 0
				has_country_flag = prospectorium_resource_discovery_exotic_gases
			}
			set_country_flag = prospectorium_resource_discovery_exotic_gases
		}
	}
}

prospectorium_resource_discovery_flag_tier_3_effect = {
	random_list = {
		1 = {
			modifier = {
				factor = 0
				has_country_flag = prospectorium_resource_discovery_energy
			}
			set_country_flag = prospectorium_resource_discovery_energy
		}
		1 = {
			modifier = {
				factor = 0
				has_country_flag = prospectorium_resource_discovery_minerals
			}
			set_country_flag = prospectorium_resource_discovery_minerals
		}
		1 = {
			modifier = {
				factor = 0
				has_country_flag = prospectorium_resource_discovery_alloys
			}
			set_country_flag = prospectorium_resource_discovery_alloys
		}
	}
	random_list = {
		1 = {
			modifier = {
				factor = 0
				has_country_flag = prospectorium_resource_discovery_rare_crystals
			}
			set_country_flag = prospectorium_resource_discovery_rare_crystals
		}
		1 = {
			modifier = {
				factor = 0
				has_country_flag = prospectorium_resource_discovery_volatile_motes
			}
			set_country_flag = prospectorium_resource_discovery_volatile_motes
		}
		1 = {
			modifier = {
				factor = 0
				has_country_flag = prospectorium_resource_discovery_exotic_gases
			}
			set_country_flag = prospectorium_resource_discovery_exotic_gases
		}
	}
	random_list = {
		1 = {
			modifier = {
				factor = 0
				has_country_flag = prospectorium_resource_discovery_zro
			}
			set_country_flag = prospectorium_resource_discovery_zro
		}
		1 = {
			modifier = {
				factor = 0
				has_country_flag = prospectorium_resource_discovery_dark_matter
			}
			set_country_flag = prospectorium_resource_discovery_dark_matter
		}
		1 = {
			modifier = {
				factor = 0
				has_country_flag = prospectorium_resource_discovery_living_metal
			}
			set_country_flag = prospectorium_resource_discovery_living_metal
		}
	}
}

prospectorium_resource_discovery_remove_flag_effect = {
	if = {
		limit = {
			has_country_flag = prospectorium_resource_discovery_energy
		}
		remove_country_flag = prospectorium_resource_discovery_energy
	}
	if = {
		limit = {
			has_country_flag = prospectorium_resource_discovery_minerals
		}
		remove_country_flag = prospectorium_resource_discovery_minerals
	}
	if = {
		limit = {
			has_country_flag = prospectorium_resource_discovery_alloys
		}
		remove_country_flag = prospectorium_resource_discovery_alloys
	}
	if = {
		limit = {
			has_country_flag = prospectorium_resource_discovery_rare_crystals
		}
		remove_country_flag = prospectorium_resource_discovery_rare_crystals
	}
	if = {
		limit = {
			has_country_flag = prospectorium_resource_discovery_volatile_motes
		}
		remove_country_flag = prospectorium_resource_discovery_volatile_motes
	}
	if = {
		limit = {
			has_country_flag = prospectorium_resource_discovery_exotic_gases
		}
		remove_country_flag = prospectorium_resource_discovery_exotic_gases
	}

	if = {
		limit = {
			has_country_flag = prospectorium_resource_discovery_zro
		}
		remove_country_flag = prospectorium_resource_discovery_zro
	}
	if = {
		limit = {
			has_country_flag = prospectorium_resource_discovery_dark_matter
		}
		remove_country_flag = prospectorium_resource_discovery_dark_matter
	}
	if = {
		limit = {
			has_country_flag = prospectorium_resource_discovery_living_metal
		}
		remove_country_flag = prospectorium_resource_discovery_living_metal
	}
}

prospectorium_resource_discovery_reward_effect = {
	if = {
		limit = {
			has_deposit = yes
			root = { is_galactic_community_member = yes }
			is_active_resolution = resolution_intergalacticdirective_a_voice_for_all
		}
		locked_random_list = {
			1 = { root = { add_resource = { $RESOURCE$ = $RESOURCELOWBOOSTED$ } } }
			1 = { root = { add_resource = { $RESOURCE$ = $RESOURCEMEDIUMBOOSTED$ } } }
			1 = { root = { add_resource = { $RESOURCE$ = $RESOURCEHIGHBOOSTED$ } } }
		}
	}
	else_if = {
		limit = {
			has_deposit = yes
		}
		locked_random_list = {
			1 = { root = { add_resource = { $RESOURCE$ = $RESOURCELOW$ } } }
			1 = { root = { add_resource = { $RESOURCE$ = $RESOURCEMEDIUM$ } } }
			1 = { root = { add_resource = { $RESOURCE$ = $RESOURCEHIGH$ } } }
		}
	}
	else_if = {
		limit = {
			root = { is_galactic_community_member = yes }
			is_active_resolution = resolution_intergalacticdirective_a_voice_for_all
		}
		locked_random_list = {
			3 = {
				add_deposit = $DEPOSIT1$
				root = { add_resource = { $RESOURCE$ = $RESOURCELOWBOOSTED$ } }
			}
			2 = {
				add_deposit = $DEPOSIT2$
				root = { add_resource = { $RESOURCE$ = $RESOURCEMEDIUMBOOSTED$ } }
			}
			1 = {
				add_deposit = $DEPOSIT3$
				root = { add_resource = { $RESOURCE$ = $RESOURCEHIGHBOOSTED$ } }
			}
		}
	}
	else = {
		locked_random_list = {
			3 = {
				add_deposit = $DEPOSIT1$
				root = { add_resource = { $RESOURCE$ = $RESOURCELOW$ } }
			}
			2 = {
				add_deposit = $DEPOSIT2$
				root = { add_resource = { $RESOURCE$ = $RESOURCEMEDIUM$ } }
			}
			1 = {
				add_deposit = $DEPOSIT3$
				root = { add_resource = { $RESOURCE$ = $RESOURCEHIGH$ } }
			}
		}
	}
}

############
# HOLDINGS #
############

append_symbiotic_link = {
	if = {
		limit = { is_variable_set = symbiotic_links }
		change_variable = {
			which = symbiotic_links
			value = 1
		}
		else = {
			set_variable = {
				which = symbiotic_links
				value = 1
			}
		}
	}
}

remove_symbiotic_link = {
	if = {
		limit = { is_variable_set = symbiotic_links }
		subtract_variable = {
			which = symbiotic_links
			value = 1
		}
		if = {
			limit = {
				check_variable = {
					which = symbiotic_links
					value = 0
				}
			}
			clear_variable = symbiotic_links
		}
	}
}

refresh_splinter_hive_modifier = {
	if = {
		limit = { has_modifier = holding_splinter_hive_modifier }
		remove_modifier = holding_splinter_hive_modifier
	}
	if = {
		limit = { is_variable_set = symbiotic_links }
		add_modifier = {
			modifier = holding_splinter_hive_modifier
			multiplier = symbiotic_links
		}
	}
}

append_noble_vacation_home = {
	if = {
		limit = { is_variable_set = noble_vacation_home }
		change_variable = {
			which = noble_vacation_home
			value = 1
		}
		else = {
			set_variable = {
				which = noble_vacation_home
				value = 1
			}
		}
	}
}

remove_noble_vacation_home = {
	if = {
		limit = { is_variable_set = noble_vacation_home }
		subtract_variable = {
			which = noble_vacation_home
			value = 1
		}
		if = {
			limit = {
				check_variable = {
					which = noble_vacation_home
					value = 0
				}
			}
			clear_variable = noble_vacation_home
		}
	}
}

refresh_noble_vacation_home_modifier = {
	if = {
		limit = { has_modifier = holding_noble_vacation_home_modifier }
		remove_modifier = holding_noble_vacation_home_modifier
	}
	if = {
		limit = { is_variable_set = noble_vacation_home }
		add_modifier = {
			modifier = holding_noble_vacation_home_modifier
			multiplier = noble_vacation_home
		}
	}
}

##########
# Events #
##########

origin_imperial_vassal_new_overlord_eventchain_1 = {
	event_target:new_subject_target = {
		set_subject_of = {
			who = root
		}
		hidden_effect = {
			add_opinion_modifier = {
				who = root
				modifier = opinion_imperial_vassal_new_overlord
			}
		}
	}
}

origin_imperial_vassal_new_overlord_eventchain_2 = {
	event_target:new_subject_target = {
		add_opinion_modifier = {
			who = root
			modifier = opinion_imperial_vassal_refused_overlordship
		}
	}
}

origin_imperial_fiefdom_bulwark_specialization_effect = {
	custom_tooltip = origin.5705.a.tt

	hidden_effect = {
		random_agreement = {
			limit = {
				owner = { is_same_value = root.overlord }
				target = { is_same_value = root }
			}
			set_agreement_preset = { preset = preset_bulwark }
			set_agreement_terms = { subject_expand = subject_can_expand_with_tithe }
		}

		create_fleet = {
			effect = {
				set_owner = root
				while = {
					count = 5
					create_ship = {
						name = random
						design = NAME_Ravager
					}
				}
				set_location = root.capital_star
			}
		}

		give_technology = {
			tech = tech_destroyers
			message = yes
		}
	}
}

origin_imperial_fiefdom_scholarium_specialization_effect = {
	custom_tooltip = origin.5705.c.tt

	hidden_effect = {
		random_agreement = {
			limit = {
				owner = { is_same_value = root.overlord }
				target = { is_same_value = root }
			}
			set_agreement_preset = { preset = preset_scholarium }
			set_agreement_terms = { subject_expand = subject_can_expand_with_tithe }
		}

		create_fleet = {
			effect = {
				set_owner = root
				create_ship = {
					name = random
					random_existing_design = science
				}
				set_location = root.capital_star
				save_event_target_as = new_science_ship_target
			}
		}
		create_leader = {
			name = random
			species = root.overlord.species
			class = scientist
			skill = 3
		}
		event_target:new_science_ship_target = {
			assign_leader = last_created_leader
		}
	}
}

origin_imperial_fiefdom_prospectorium_specialization_effect = {
	custom_tooltip = origin.5705.e.tt

	hidden_effect = {
		random_agreement = {
			limit = {
				owner = { is_same_value = root.overlord }
				target = { is_same_value = root }
			}
			set_agreement_preset = { preset = preset_prospectorium }
			set_agreement_terms = { subject_expand = subject_can_expand_with_tithe }
		}

		while = {
			count = 2
			create_fleet = {
				effect = {
					set_owner = root
					create_ship = {
						name = random
						random_existing_design = constructor
					}
					set_location = root.capital_star
				}
			}
		}
	}
}

origin_grateful_vassal_effect = {
	if = {
		limit = {
			has_modifier = overlord_ungrateful_vassal_modifier
		}
		remove_modifier = overlord_ungrateful_vassal_modifier
	}

	add_modifier = {
		modifier = overlord_grateful_vassal_modifier
		years = 5
	}
}

origin_ungrateful_vassal_effect = {
	if = {
		limit = {
			has_modifier = overlord_grateful_vassal_modifier
		}
		remove_modifier = overlord_grateful_vassal_modifier
	}

	add_modifier = {
		modifier = overlord_ungrateful_vassal_modifier
		years = 5
	}
}

######################
# More Shroudwalking #
######################
save_spynetwork_country = {
	if = {
		limit = {
			shroudwalker_insight_save_spynetwork_trigger = { EVENT_TARGET = spynetwork_country_1 }
		}
		target = { save_event_target_as = spynetwork_country_1 }
	}
	else_if = {
		limit = {
			shroudwalker_insight_save_spynetwork_trigger = { EVENT_TARGET = spynetwork_country_2 }
		}
		target = { save_event_target_as = spynetwork_country_2 }
	}
	else_if = {
		limit = {
			shroudwalker_insight_save_spynetwork_trigger = { EVENT_TARGET = spynetwork_country_3 }
		}
		target = { save_event_target_as = spynetwork_country_3 }
	}
	else_if = {
		limit = {
			shroudwalker_insight_save_spynetwork_trigger = { EVENT_TARGET = spynetwork_country_4 }
		}
		target = { save_event_target_as = spynetwork_country_4 }
	}
	else_if = {
		limit = {
			shroudwalker_insight_save_spynetwork_trigger = { EVENT_TARGET = spynetwork_country_5 }
		}
		target = { save_event_target_as = spynetwork_country_5 }
	}
	else_if = {
		limit = {
			shroudwalker_insight_save_spynetwork_trigger = { EVENT_TARGET = spynetwork_country_6 }
		}
		target = { save_event_target_as = spynetwork_country_6 }
	}
}

shroudwalker_insight_purchasing_effect = {
	add_resource = { influence = -50 }
	add_resource = {
		energy = -10
		mult = $TARGET$.trigger:empire_size
	}
	custom_tooltip = opinion10
	hidden_effect = {
		event_target:shroudwalker_enclave_country = {
			add_trust = {
				who = root
				amount = 10
			}
		}
		set_timed_country_flag = {
			flag = shroudwalker_insight_cooldown
			days = 360
		}
		set_saved_date = {
			key = shroudwalker_insight_timer
			days_from_present = 360
			expires = 360
		}
		start_situation = {
			type = shroudwalker_spy_network
			target = $TARGET$
		}
		country_event = { id = enclave.7055 }
	}
}

rogue_shaman_modifier_removal = {
	hidden_effect = {
		remove_modifier = rogue_shaman_00
		remove_modifier = rogue_shaman_01
		remove_modifier = rogue_shaman_02
		remove_modifier = rogue_shaman_03
		remove_modifier = rogue_shaman_04
	}
}

##########
# Galcom #
##########
galcom_change_agreement_term_resolution_effect = {
	every_galcom_member = {
		limit = {
			is_overlord = yes
		}
		every_agreement = {
			limit = {
				target = {
					is_galactic_community_member = yes
				}
				has_term_value = {
					term = $TERM$
					value = $CURRENT_VALUE$
				}
			}
			set_agreement_terms = {
				$TERM$ = $NEW_VALUE$
			}
		}
	}
}

galcom_success_effect_repeal = {
	hidden_effect = {
		cancel_resolution = $RESOLUTION$
		set_timed_country_flag = { flag = $FLAG$ days = @resolution_flag_timer }
		add_modifier = {
			modifier = resolution_passed_diplomatic_weight
			days = 2200
		}
	}
}

galcom_success_effect = {
	hidden_effect = {
		set_global_flag = galactic_community_resolution_passed
		set_timed_country_flag = { flag = $FLAG$ days = @resolution_flag_timer }
		add_modifier = {
			modifier = resolution_passed_diplomatic_weight
			days = 2200
		}
	}
}

galcom_fail_effects = {
	hidden_effect = {
		set_timed_country_flag = { flag = $FLAG$ days = @resolution_flag_timer }
		add_modifier = {
			modifier = resolution_failed_diplomatic_weight
			days = 2200
		}
	}
}

galcom_subject_ethic_modifier_effect = {
	add_galcom_modifier_effect = { ETHIC = spiritualist }
	add_galcom_modifier_effect = { ETHIC = materialist }
	add_galcom_modifier_effect = { ETHIC = authoritarian }
	add_galcom_modifier_effect = { ETHIC = egalitarian }
	add_galcom_modifier_effect = { ETHIC = xenophile }
	add_galcom_modifier_effect = { ETHIC = xenophobe }
	add_galcom_modifier_effect = { ETHIC = militarist }
	add_galcom_modifier_effect = { ETHIC = pacifist }
	add_galcom_modifier_effect = { ETHIC = socialism }
	add_galcom_modifier_effect = { ETHIC = capitalism }
}

add_galcom_modifier_effect = {
	if = {
		limit = {
			overlord = { has_ethic = ethic_fanatic_$ETHIC$ }
			NOR = {
				is_active_resolution = resolution_bureaucraticsurveillance_borderless_authority
				is_active_resolution = resolution_bureaucraticsurveillance_personal_oversight
				has_modifier = resolution_galcom_$ETHIC$_ethic_modifier_tier_1
			}
		}
		add_modifier = {
			modifier = resolution_galcom_$ETHIC$_ethic_modifier_tier_1
			days = -1
		}
	}
	else_if = {
		limit = {
			overlord = { has_ethic = ethic_fanatic_$ETHIC$ }
			NOR = {
				is_active_resolution = resolution_bureaucraticsurveillance_personal_oversight
				has_modifier = resolution_galcom_$ETHIC$_ethic_modifier_tier_2
			}
		}
		add_modifier = {
			modifier = resolution_galcom_$ETHIC$_ethic_modifier_tier_2
			days = -1
		}
	}
	else_if = {
		limit = {
			overlord = { has_ethic = ethic_fanatic_$ETHIC$ }
			NOT = { has_modifier = resolution_galcom_$ETHIC$_ethic_modifier_tier_3 }
		}
		add_modifier = {
			modifier = resolution_galcom_$ETHIC$_ethic_modifier_tier_3
			days = -1
		}
	}
}

galcom_subject_remove_ethic_modifier_effect = {
	remove_galcom_modifier_effect = { ETHIC = spiritualist }
	remove_galcom_modifier_effect = { ETHIC = materialist }
	remove_galcom_modifier_effect = { ETHIC = authoritarian }
	remove_galcom_modifier_effect = { ETHIC = egalitarian }
	remove_galcom_modifier_effect = { ETHIC = xenophile }
	remove_galcom_modifier_effect = { ETHIC = xenophobe }
	remove_galcom_modifier_effect = { ETHIC = militarist }
	remove_galcom_modifier_effect = { ETHIC = pacifist }
	remove_galcom_modifier_effect = { ETHIC = socialism }
	remove_galcom_modifier_effect = { ETHIC = capitalism }
}

remove_galcom_modifier_effect = {
	if = {
		limit = {
			has_modifier = resolution_galcom_$ETHIC$_ethic_modifier_tier_1
		}
		remove_modifier = resolution_galcom_$ETHIC$_ethic_modifier_tier_1
	}
	if = {
		limit = {
			has_modifier = resolution_galcom_$ETHIC$_ethic_modifier_tier_2
		}
		remove_modifier = resolution_galcom_$ETHIC$_ethic_modifier_tier_2
	}
	if = {
		limit = {
			has_modifier = resolution_galcom_$ETHIC$_ethic_modifier_tier_3
		}
		remove_modifier = resolution_galcom_$ETHIC$_ethic_modifier_tier_3
	}
}

galcom_upgrade_ethic_modifier_effect = {
	upgrade_galcom_modifier_effect = { ETHIC = spiritualist }
	upgrade_galcom_modifier_effect = { ETHIC = materialist }
	upgrade_galcom_modifier_effect = { ETHIC = authoritarian }
	upgrade_galcom_modifier_effect = { ETHIC = egalitarian }
	upgrade_galcom_modifier_effect = { ETHIC = xenophile }
	upgrade_galcom_modifier_effect = { ETHIC = xenophobe }
	upgrade_galcom_modifier_effect = { ETHIC = militarist }
	upgrade_galcom_modifier_effect = { ETHIC = pacifist }
	upgrade_galcom_modifier_effect = { ETHIC = socialism }
	upgrade_galcom_modifier_effect = { ETHIC = capitalism }
}

upgrade_galcom_modifier_effect = {
	if = {
		limit = {
			has_modifier = resolution_galcom_$ETHIC$_ethic_modifier_tier_1
		}
		remove_modifier = resolution_galcom_$ETHIC$_ethic_modifier_tier_1
		add_modifier = {
			modifier = resolution_galcom_$ETHIC$_ethic_modifier_tier_2
			days = -1
		}
	}
	else_if = {
		limit = {
			has_modifier = resolution_galcom_$ETHIC$_ethic_modifier_tier_2
		}
		remove_modifier = resolution_galcom_$ETHIC$_ethic_modifier_tier_2
		add_modifier = {
			modifier = resolution_galcom_$ETHIC$_ethic_modifier_tier_3
			days = -1
		}
	}
}

galcom_downgrade_ethic_modifier_effect = {
	downgrade_galcom_modifier_effect = { ETHIC = spiritualist }
	downgrade_galcom_modifier_effect = { ETHIC = materialist }
	downgrade_galcom_modifier_effect = { ETHIC = authoritarian }
	downgrade_galcom_modifier_effect = { ETHIC = egalitarian }
	downgrade_galcom_modifier_effect = { ETHIC = xenophile }
	downgrade_galcom_modifier_effect = { ETHIC = xenophobe }
	downgrade_galcom_modifier_effect = { ETHIC = militarist }
	downgrade_galcom_modifier_effect = { ETHIC = pacifist }
	downgrade_galcom_modifier_effect = { ETHIC = socialism }
	downgrade_galcom_modifier_effect = { ETHIC = capitalism }
}

downgrade_galcom_modifier_effect = {
	if = {
		limit = {
			has_modifier = resolution_galcom_$ETHIC$_ethic_modifier_tier_3
		}
		remove_modifier = resolution_galcom_$ETHIC$_ethic_modifier_tier_3
		add_modifier = {
			modifier = resolution_galcom_$ETHIC$_ethic_modifier_tier_2
			days = -1
		}
	}
	else_if = {
		limit = {
			has_modifier = resolution_galcom_$ETHIC$_ethic_modifier_tier_2
		}
		remove_modifier = resolution_galcom_$ETHIC$_ethic_modifier_tier_2
		add_modifier = {
			modifier = resolution_galcom_$ETHIC$_ethic_modifier_tier_1
			days = -1
		}
	}
	else_if = {
		limit = {
			has_modifier = resolution_galcom_$ETHIC$_ethic_modifier_tier_1
		}
		remove_modifier = resolution_galcom_$ETHIC$_ethic_modifier_tier_1
	}
}
