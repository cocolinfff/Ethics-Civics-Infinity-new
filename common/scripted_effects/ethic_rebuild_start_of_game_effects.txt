
refresh_subject_count_loyalty_penalty = {
	every_subject = {
		erase_modifier = { MOD = divided_patronage }
	}
	if = {
		limit = {
			NOR = {
				has_civic = civic_feudal_realm
				has_civic = civic_coalition_government
				has_civic = civic_aristocratic_elite
				has_civic = civic_franchising
				has_ascension_perk = ap_shared_destiny
			}
			subjects > 1
		}
		set_variable = { which = subjects_minus_one value = trigger:subjects }
		subtract_variable = { which = subjects_minus_one value = 1 }
		every_subject = {
			add_modifier = {
				modifier = divided_patronage
				multiplier = PREV.subjects_minus_one
			}
		}
		clear_variable = subjects_minus_one
	}
}

generate_start_pops = {
	if = {
		limit = {
			owner = {
				has_origin = origin_machine_cult
				NOT = { has_valid_civic = civic_machine_soul_servant }
			}
		}
		owner = {
			create_built_robot_species = yes
		}
		while = {
			count = 8
			create_pop = {
				species = last_created_species
			}
		}
		add_building = building_mecha_monastery
		remove_building = building_temple
		while = {
			limit = {
				num_pops < 27
			}
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_machine_cult
				has_valid_civic = civic_machine_soul_servant
			}
		}
		owner = {
			create_built_robot_species = yes
		}
		while = {
			count = 5
			create_pop = {
				species = last_created_species
			}
		}
		add_building = building_mecha_monastery
		add_building = building_mechanical_sanctuary
		remove_building = building_temple
		while = {
			limit = {
				num_pops < 33
			}
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				OR = {
					has_origin = origin_syncretic_evolution
					has_origin = origin_symbiotic_race
					has_origin = origin_slave_race
					has_origin = origin_necrophage
					has_valid_civic = civic_machine_servitor
					has_valid_civic = civic_machine_assimilator
					has_valid_civic = civic_machine_financial_investment
				}
			}
		}

		if = { limit = { last_created_species = { is_species_class = MACHINE } }
			modify_species = {
				species = last_created_species
				add_trait = trait_machine_unit
				add_traits_at_start_of_list = yes
			}
			last_created_species = { save_event_target_as = last_created_species }
		}

		if = {
			limit = {
				owner = {
					OR = {
						has_origin = origin_syncretic_evolution
						has_origin = origin_necrophage
					    has_origin = origin_symbiotic_race
					    has_origin = origin_slave_race
					}
				}
			}

			last_created_species = {
				set_species_flag = syncretic_species@root.owner
				if = {
					limit = {
						prev.owner = {
							has_origin = origin_syncretic_evolution
					    has_origin = origin_symbiotic_race
					    has_origin = origin_slave_race
						}
					}
					set_citizenship_type = {
						country = root.owner
						type = citizenship_slavery
					}
				}
			}
			if = {
				limit = {
					owner = {
						has_origin = origin_necrophage
						OR = {
							has_valid_civic = civic_fanatic_purifiers
							has_valid_civic = civic_hive_devouring_swarm
							is_gestalt = yes
						}
					}
				}
				while = {
					count = 6
					create_pop = {
						species = last_created_species
						ethos = random
					}
				}
			}
			else_if = {
				limit = {
					owner = {
						has_origin = origin_necrophage
						is_gestalt = yes
					}
				}
				while = {
					count = 9
					create_pop = {
						species = last_created_species
						ethos = random
					}
				}
			}
			else = {
				while = {
					count = 12
					create_pop = {
						species = last_created_species
						ethos = random
					}
				}
			}
		}

		if = {
			limit = {
				owner = { has_valid_civic = civic_machine_servitor }
			}
			last_created_species = {
				if = {
					limit = {
						ROOT = { is_planet_class = pc_shattered_ring_habitable }
					}
					modify_species = {
						species = this
						ideal_planet_class = home_planet
					}
				}
				set_citizenship_type = {
					country = root.owner
					type = citizenship_limited
				}
				set_living_standard = {
					country = root.owner
					type = living_standard_organic_trophy
				}
			}
			while = {
				count = 5
				create_pop = {
					species = last_created_species
					ethos = random
				}
				last_created_pop = {
					clear_ethos = yes
				}
			}
		}

		if = {
			limit = {
				owner = { has_valid_civic = civic_machine_assimilator }
			}
			last_created_species = {
				if = {
					limit = {
						ROOT = { is_planet_class = pc_shattered_ring_habitable }
					}
					modify_species = {
						species = this
						ideal_planet_class = home_planet
					}
				}
				set_citizenship_type = {
					country = root.owner
					type = citizenship_full_machine
				}
				set_living_standard = {
					country = root.owner
					type = living_standard_hive_mind
				}
			}
			while = {
				count = 10
				create_pop = {
					species = last_created_species
					ethos = random
				}
				last_created_pop = {
					clear_ethos = yes
				}
			}
		}

		if = {
			limit = {
				owner = { has_valid_civic = civic_machine_financial_investment }
			}
			last_created_species = {
				if = {
					limit = {
						ROOT = { is_planet_class = pc_shattered_ring_habitable }
					}
					modify_species = {
						species = this
						ideal_planet_class = home_planet
					}
				}
			}
			while = {
				count = 5
				create_pop = {
					species = last_created_species
					ethos = random
				}
				last_created_pop = {
					clear_ethos = yes
				}
			}
		}
	}

	if = {
		limit = { owner = { has_origin = origin_mechanists } }
		owner = { create_built_robot_species = yes }
		while = {
			count = 8
			create_pop = {
				species = last_created_species
			}
		}

		add_building = building_robot_assembly_plant
		add_district_and_planet_size_if_needed_effect = {
			district = district_generator
		}
		while = {
			limit = { num_pops < 27 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_necrophage
				NOR = { #purges them instead
					has_civic = civic_fanatic_purifiers
					has_civic = civic_hive_devouring_swarm
				}
			}
		}
		if = {
			limit = {
				owner = { has_valid_civic = civic_agrarian_idyll } # Needs an extra building slot
			}
			add_district_and_planet_size_if_needed_effect = {
				district = district_city
			}
		}

		add_building = building_necrophage_elevation_chamber
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_clone_army
			}
		}
		add_building = building_clone_army_clone_vat
		add_building = building_clone_army_clone_vat
		planet_event = { id = clones.10 days = 1095 random = 730 }
	}
	if = {
		limit = { owner = { is_hive_empire = yes } }
		while = {
			limit = { num_pops < 33 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = { owner = { has_valid_civic = civic_machine_servitor } }
		while = {
			limit = { num_pops < 33 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = { owner = { is_machine_empire = yes } }
		while = {
			limit = { num_pops < 29 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = { owner = { is_megacorp = yes } }
		while = {
			limit = { num_pops < 28 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				is_regular_empire = yes
			}
		}
		while = {
			limit = { num_pops < 28 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = { #homicidal necrophages lose 1/4 of their necrophytes to fleeing
			owner = {
				has_origin = origin_necrophage
				is_homicidal = yes
			}
		}
		while = {
			count = 2
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_default }
		}
		while = {
			count = 4
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_taking_care_of_god }
		}
		while = {
			count = 12
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_taking_care_of_god
			}
		}
		while = {
			count = 13
			random_owned_pop = {
				modify_species = {
					species = this
					add_trait = trait_fallen_god
					add_traits_at_start_of_list = yes
				}
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_civic = civic_permanent_employment	
			}
		}
		while = {
			count = 4
			random_owned_pop = {
				limit = {
					OR = {
						has_job = clerk
						has_job = technician
						has_job = miner
						has_job = farmer
					}
					is_robotic_species = no
				}
				modify_species = {
					species = this
					add_trait = trait_zombie
					add_traits_at_start_of_list = yes
				}
				if = {
					limit = {
						has_trait = trait_syncretic_proles
					}
					modify_species = {
						species = this
						remove_trait = trait_syncretic_proles
					}	
				}
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_civic = civic_corpus	
			}
		}
		add_building = building_nuumismatic_shrine
		remove_building = building_temple
		while = {
			count = 4
			random_owned_pop = {
				limit = {
					OR = {
						has_job = clerk
						has_job = technician
						has_job = miner
						has_job = farmer
					}
					is_robotic_species = no
				}
				modify_species = {
					species = this
					add_trait = trait_flesh_components
					add_traits_at_start_of_list = yes
				}
				if = {
					limit = {
						has_trait = trait_syncretic_proles
					}
					modify_species = {
						species = this
						remove_trait = trait_syncretic_proles
					}	
				}
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_civic = civic_libido_equipment	
			}
		}
		add_building = building_equipment_breeding_plant
		while = {
			count = 6
			random_owned_pop = {
				limit = {
					OR = {
						has_job = clerk
						has_job = technician
						has_job = miner
						has_job = farmer
					}
					is_robotic_species = no
				}
				modify_species = {
					species = this
					add_trait = trait_slave_gene
					add_traits_at_start_of_list = yes
				}
				if = {
					limit = {
						has_trait = trait_syncretic_proles
					}
					modify_species = {
						species = this
						remove_trait = trait_syncretic_proles
					}	
				}
			}
		}
	}
}