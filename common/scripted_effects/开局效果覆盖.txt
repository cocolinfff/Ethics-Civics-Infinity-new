#开局人口
generate_start_pops = {
    optimize_memory
    # SECONDARY SPECIES STARTS: add Traits, set living standards, etc.
    if = {
        limit = {
            owner = {
                OR = {
                    has_origin = origin_syncretic_evolution
                    has_origin = origin_necrophage
                    has_valid_civic = civic_machine_servitor
                    has_valid_civic = civic_machine_assimilator
                    has_valid_civic = civic_hive_bodysnatcher
                }
            }
        }

        if = { # Machines: Add 'Machine' Trait
            limit = {
                last_created_species = { is_species_class = MACHINE }
            }
            modify_species = {
                species = last_created_species
                add_trait = trait_machine_unit
                add_traits_at_start_of_list = yes
            }
            last_created_species = {
                save_event_target_as = last_created_species
            }
        }

        # Syncretic Evolution & Necrophage: set flag & citizenship type; (Necrophage) spawn prepatent Pops
        if = {
            limit = {
                owner = {
                    OR = {
                        has_origin = origin_syncretic_evolution
                        has_origin = origin_necrophage
                    }
                }
            }

            last_created_species = {
                set_species_flag = syncretic_species@root.owner
                if = {
                    limit = {
                        prev.owner = {
                            has_origin = origin_syncretic_evolution
                        }
                    }
                    set_citizenship_type = {
                        country = root.owner
                        type = citizenship_slavery
                    }
                }
            }
            if = {
                limit = {
                    owner = {
                        has_origin = origin_necrophage
                        OR = {
                            has_valid_civic = civic_fanatic_purifiers
                            has_valid_civic = civic_hive_devouring_swarm
                            is_gestalt = yes
                        }
                    }
                }
                create_pop_group = {
                    size = 600
                    species = last_created_species
                }
            }
            else_if = {
                limit = {
                    owner = {
                        has_origin = origin_necrophage
                        is_gestalt = yes
                    }
                }
                create_pop_group = {
                    size = 900
                    species = last_created_species
                }
            }
            else = {
                create_pop_group = {
                    size = 1200
                    species = last_created_species
                }
            }
        }
        generate_civic_secondary_pops = yes
        make_nascent_starting_pops = yes
        if = {
            limit = {
                owner = {
                    has_origin = origin_symbiotic_race
                }
            }
            modify_species = {
                species = last_created_species
                add_trait = trait_symbiotic
                add_traits_at_start_of_list = yes
            }
            last_created_species = {
                set_species_flag = syncretic_species@root.owner
            }
            create_pop_group = {
                size = 1200
                species = last_created_species
            }
        }
        generate_civic_secondary_pops = yes
        make_nascent_starting_pops = yes
    }

    # Mechanist: spawn robot Pops; add Job-specific Traits; spawn Robot Assembly Plant
    if = {
        limit = {
            owner = {
                has_origin = origin_mechanists
            }
        }
        owner = {
            create_built_robot_species = yes
        }
        last_created_species = {
            change_species_characteristics = {
                add_trait = trait_auto_mod_robotic
            }
        }
        create_pop_group = {
            size = 800
            species = last_created_species
        }
        while = {
            limit = { pop_amount < 2700 }
            create_pop_group = {
                species = owner_main_species
            }
        }
    }
    if = {
        limit = {
            owner = {
                has_civic = civic_machine_soul_servant
            }
        }
        owner = {
            create_built_robot_species = yes
        }
        last_created_species = {
            change_species_characteristics = {
                add_trait = trait_auto_mod_robotic
            }
        }
        create_pop_group = {
            size = 800
            species = last_created_species
        }
    }

    # MISC: spawn Pops
    if = {
        limit = {
            owner = {
                is_hive_empire = yes
                is_wilderness_empire = no
            }
        }
        while = {
            limit = { pop_amount < 3300 }
            create_pop_group = {
                species = owner_main_species
            }
        }
    }
    if = {
        limit = {
            owner = { has_valid_civic = civic_machine_servitor }
        }
        while = {
            limit = { pop_amount < 4800 }	# Includes the 2,000 Bio-Trophies that were already created.
            create_pop_group = {
                species = owner_main_species
            }
        }
    }
    if = {
        limit = { owner = { is_machine_empire = yes } }
        while = {
            limit = { pop_amount < 2900 }
            create_pop_group = {
                species = owner_main_species
            }
        }
    }
    if = {
        limit = {
            owner = {
                is_megacorp = yes
                has_reduced_pop_origin = no
            }
        }
        while = {
            limit = { pop_amount < 2800 }
            create_pop_group = {
                species = owner_main_species
            }
        }
    }
    if = {
        limit = {
            owner = {
                has_origin = origin_true_yuht
                NOT = { has_valid_civic = civic_machine_servitor }
            }
        }
        while = {
            count = 4800
            create_pop_group = {
                species = owner_main_species
                ethos = random
            }
        }
    }
    if = {
        limit = {
            owner = { has_origin = origin_advanced_start }
        }
        create_pop_group = {
            size = 1800
            species = owner_main_species
        }
    }
    if = {
        limit = {
            owner = { has_origin = origin_taking_care_of_god }
        }
        while = {
            count = 1000
            random_owned_pop_group = {
                modify_species = {
                    species = this
                    add_trait = trait_fallen_god
                    add_traits_at_start_of_list = yes
                }
            }
        }
    }
    if = {
        limit = {
            owner = { has_origin = origin_broken_shackles }
            pop_amount < 600
        }

        while = {
            limit = { pop_amount < 600 }
            create_pop_group = {
                species = owner_main_species
            }
        }
    }
    if = {
        limit = {
            owner = {
                is_regular_empire = yes
                has_reduced_pop_origin = no
            }
        }
        while = {
            limit = { pop_amount < 2800 }
            create_pop_group = {
                species = owner_main_species
            }
        }
    }
    if = {
        limit = {
            owner = { has_origin = origin_payback }
            pop_amount < 1800
        }
        while = {
            limit = { pop_amount < 1800 }
            create_pop_group = {
                species = owner_main_species
            }
        }
    }
    if = {
        limit = {
            owner = { has_origin = origin_fear_of_the_dark }
        }
        while = {
            limit = { pop_amount < 2000 }
            create_pop_group = {
                species = owner_main_species
            }
        }
    }
    if = {
        limit = { #homicidal necrophages lose 1/4 of their necrophytes to fleeing
            owner = {
                has_origin = origin_necrophage
                is_homicidal = yes
            }
        }
        create_pop_group = {
            size = 200
            species = owner_main_species
        }
    }
    if = {
        limit = {
            owner = { has_origin = origin_default }
        }
        create_pop_group = {
            size = 400
            species = owner_main_species
        }
    }
    if = {
        limit = {
            owner = {
                is_eager_explorer_empire = yes
            }
        }
        while = {
            count = 10
            random_owned_pop_group = {
                limit = {
                    is_same_species = root.owner.species
                }
                kill_single_pop = yes
            }
        }
    }

    if = {
        limit = {
            exists = owner
            owner = {
                has_origin = origin_toxic_knights
            }
        }
        while = { #they get the habitat
            count = 11
            random_owned_pop_group = { kill_single_pop = yes }
        }
    }

    # Nascent Stage pops being generated
    make_nascent_starting_pops = yes

    # Permanent Employment: add Zombie Trait
    if = {
        limit = {
            owner = {
                has_civic = civic_permanent_employment
            }
        }
        while = {
            count = 4
            random_owned_pop_group = { kill_single_pop = yes }
        }
        create_zombie_pop_group = {
            SIZE = 400
        }
    }

    # Civilians
    if = {
        limit = {
            owner =  {
                NOR = {
                    has_origin = origin_broken_shackles
                    is_wilderness_empire = yes
                    has_valid_civic = civic_machine_servitor
                }
            }
        }
        while = {
            count = @civilians_counter
            create_pop_group = {
                size = @civilians_gamestart
                species = owner_main_species
            }
        }
    }

    # Wilderness
    if = {
        limit = {
            owner = { is_wilderness_empire = yes }
        }
        while = {
            limit = { pop_amount < 2000 }
            create_pop_group = {
                species = owner_main_species
            }
        }
    }

    # Cybernetic Creed: add Unique Traits
    if = {
        limit = {
            owner = {
                has_origin = origin_cybernetic_creed
            }
        }
        while = {
            limit = {
                any_owned_pop_group = {
                    is_robotic_species = no
                    has_ethic = ethic_spiritualist
                    has_cybernetic_creed_trait = no
                }
            }
            weighted_random_owned_pop_group = {
                limit = {
                    is_robotic_species = no
                    has_ethic = ethic_spiritualist
                    has_cybernetic_creed_trait = no
                }
                modify_species = {
                    species = this
                    add_trait = trait_cyborg_ritualistic_implants
                    add_traits_at_start_of_list = yes
                }
            }
        }
        owner = {
            set_policy = {
                policy = robot_pop_policy
                option = robot_pops_allowed
                cooldown = no
            }
        }
    }

    #Synthetic Fertility
    if = {
        limit = {
            owner = { has_origin = origin_synthetic_fertility }
        }
        create_pop_group = {
            size = 900
            species = owner_main_species
        }
    }
}

#生成第二种族
generate_civic_secondary_pops = {
    # Ensuring that this country flag has been set by this point
    if = {
        limit = {
            owner = {
                OR = {
                    last_created_species = { is_lithoid = yes }
                    last_created_species = { has_trait = trait_machine_unit }
                }
            }
        }
        owner = {
            set_country_flag = lithoid_subspecies
        }
    }
    else = {
        owner = {
            set_country_flag = non_lithoid_subspecies
        }
    }
    # Rogue Servitor & Driven Assimilator setting up pop special traits to make sure that their secondary species have all the cool traits. Spawning of the pops happens next.
    if = {
        limit = {
            owner = {
                OR = {
                    has_valid_civic = civic_machine_assimilator
                    has_valid_civic = civic_machine_servitor
                }
                OR = {
                    has_origin = origin_void_machines
                    has_origin = origin_post_apocalyptic_machines
                    has_origin = origin_subterranean_machines
                }
            }
        }
        owner = {
            switch = {
                trigger = has_origin
                origin_void_machines = {
                    last_created_species = {
                        modify_species = {
                            species = this
                            add_trait = trait_void_dweller_1
                            add_traits_at_start_of_list = yes
                            ideal_planet_class = pc_habitat
                        }
                    }
                }
                origin_post_apocalyptic_machines = {
                    last_created_species = {
                        change_species_characteristics = {
                            add_trait = trait_survivor
                            add_traits_at_start_of_list = yes
                        }
                    }
                }
                origin_subterranean_machines = {
                    last_created_species = {
                        change_species_characteristics = {
                            add_trait = trait_cave_dweller
                            add_traits_at_start_of_list = yes
                        }
                    }
                }
            }
        }
    }
    else_if = {
        limit = {
            owner = {
                has_valid_civic = civic_hive_bodysnatcher
                OR = {
                    has_origin = origin_void_dwellers
                    has_origin = origin_post_apocalyptic
                    has_origin = origin_subterranean
                    has_origin = origin_wilderness
                }
            }
        }
        owner = {
            switch = {
                trigger = has_origin
                origin_void_dwellers = {
                    last_created_species = {
                        modify_species = {
                            species = this
                            add_trait = trait_void_dweller_1
                            add_traits_at_start_of_list = yes
                            ideal_planet_class = pc_habitat
                        }
                    }
                }
                origin_post_apocalyptic = {
                    last_created_species = {
                        change_species_characteristics = {
                            add_trait = trait_survivor
                            add_traits_at_start_of_list = yes
                        }
                    }
                }
                origin_subterranean = {
                    last_created_species = {
                        change_species_characteristics = {
                            add_trait = trait_cave_dweller
                            add_traits_at_start_of_list = yes
                        }
                    }
                }
                origin_wilderness = {
                    last_created_species = {
                        change_species_characteristics = {
                            add_trait = trait_wilderness
                            add_traits_at_start_of_list = yes
                        }
                    }
                }
            }
        }
    }
    # Rogue Servitor: set citizenship, living standard & preference; spawn Pops
    if = {
        limit = {
            owner = { has_valid_civic = civic_machine_servitor }
        }
        last_created_species = {
            if = {
                limit = {
                    root = {
                        OR = {
                            is_planet_class = pc_shattered_ring_habitable
                            is_planet_class = pc_gaia
                        }
                    }
                }
                modify_species = {
                    species = this
                    ideal_planet_class = home_planet
                }
            }
            set_citizenship_type = {
                country = root.owner
                type = citizenship_limited
            }
            set_living_standard = {
                country = root.owner
                type = living_standard_organic_trophy
            }
        }
        create_pop_group = {
            size = 500
            species = last_created_species
        }
    }
    if = {
        limit = {
            owner = { has_origin = origin_atomic_heart }
        }
        create_pop_group = {
            size = 1200
            species = last_created_species
        }
    }

    # Driven Assimilator and Bodysnatcher set citizenship, living standard & preference; spawn Pops
    if = {
        limit = {
            owner = {
                OR = {
                    has_valid_civic = civic_machine_assimilator
                    has_valid_civic = civic_hive_bodysnatcher
                }
            }
        }
        last_created_species = {
            if = {
                limit = {
                    root = {
                        OR = {
                            is_planet_class = pc_shattered_ring_habitable
                            is_planet_class = pc_gaia
                        }
                    }
                }
                modify_species = {
                    species = this
                    ideal_planet_class = home_planet
                }
            }
            if = {
                limit = {
                    root.owner = { is_machine_empire = yes }
                }
                set_citizenship_type = {
                    country = root.owner
                    type = citizenship_full_machine
                }
            }
            else = {
                set_citizenship_type = {
                    country = root.owner
                    type = citizenship_full
                }
            }

            set_living_standard = {
                country = root.owner
                type = living_standard_hive_mind
            }
        }
        create_pop_group = {
            size = 1000
            species = last_created_species
        }
    }
}

#红色起源
red_origin_start_effect = {
    # Main Backup
    if = { # Backup if the main system hasn't already been initialized
        limit = {
            NOT = { exists = event_target:origin_red_homeland_country }
        }
        # Find a random system, hopefully close to a player with the origin
        random_system = {
            limit = {
                has_owner = no
                has_special_star_flag_trigger = no
            }
            weights = {
                base = 1
                modifier = {
                    factor = 100
                    closest_system = {
                        use_bypasses = no
                        min_steps = 2
                        max_steps = 4
                        limit = {
                            has_owner = yes
                            owner = {
                                has_origin = origin_red_satellite
                            }
                        }
                    }
                }
            }
            # Start Spawning Systems
            set_spawn_system_batch = begin
            red_origin_start_spawn_effect = { INITIALIZER = soviet_union_system_init }
            # Main Empire
            event_target:origin_red_homeland.solar_system = {
                red_origin_start_spawn_effect = { INITIALIZER = soviet_union_system_2_init }
                red_origin_start_spawn_effect = { INITIALIZER = soviet_union_system_3_init }
            }
            # Vassals
            event_target:red_homeland_2.solar_system = { red_origin_start_spawn_effect = { INITIALIZER = soviet_union_system_4_init } }
            if = {
                limit = {
                    NOT = {
                        galaxy_size = tiny
                    }
                }
                event_target:red_homeland_2.solar_system = { red_origin_start_spawn_effect = { INITIALIZER = soviet_union_system_5_init } }
            }
            if = {
                limit = {
                    NOR = {
                        galaxy_size = tiny
                        galaxy_size = small
                    }
                }
                event_target:red_homeland_3.solar_system = { red_origin_start_spawn_effect = { INITIALIZER = soviet_union_system_6_init } }
            }
            if = {
                limit = {
                    NOR = {
                        galaxy_size = tiny
                        galaxy_size = small
                        galaxy_size = medium
                    }
                }
                event_target:red_homeland_3.solar_system = { red_origin_start_spawn_effect = { INITIALIZER = soviet_union_system_7_init } }
            }
            set_spawn_system_batch = end

            # Set up hyperlanes if they are missing
            red_origin_start_hyperlane_effect = {
                ORIGINAL_STAR_SYSTEM = event_target:red_homeland_2.solar_system
                SECOND_STAR_SYSTEM = event_target:origin_red_homeland.solar_system
            }
            red_origin_start_hyperlane_effect = {
                ORIGINAL_STAR_SYSTEM = event_target:red_homeland_3.solar_system
                SECOND_STAR_SYSTEM = event_target:origin_red_homeland.solar_system
            }
            red_origin_start_hyperlane_effect = {
                ORIGINAL_STAR_SYSTEM = event_target:red_homeland_4.solar_system
                SECOND_STAR_SYSTEM = event_target:red_homeland_2.solar_system
            }
            if = {
                limit = {
                    exists = event_target:red_homeland_5
                }
                red_origin_start_hyperlane_effect = {
                    ORIGINAL_STAR_SYSTEM = event_target:red_homeland_5.solar_system
                    SECOND_STAR_SYSTEM = event_target:red_homeland_2.solar_system
                }
            }
            if = {
                limit = {
                    exists = event_target:red_homeland_6
                }
                red_origin_start_hyperlane_effect = {
                    ORIGINAL_STAR_SYSTEM = event_target:red_homeland_6.solar_system
                    SECOND_STAR_SYSTEM = event_target:red_homeland_3.solar_system
                }
            }
            if = {
                limit = {
                    exists = event_target:red_homeland_7
                }
                red_origin_start_hyperlane_effect = {
                    ORIGINAL_STAR_SYSTEM = event_target:red_homeland_7.solar_system
                    SECOND_STAR_SYSTEM = event_target:red_homeland_3.solar_system
                }
            }
        }
    }
    else_if = {
        limit = { # Backup if any of the other main empire systems are missing
            OR = {
                NOT = { any_system = { has_star_flag = soviet_union_system_2_flag } }
                NOT = { any_system = { has_star_flag = soviet_union_system_3_flag } }
            }
        }
        event_target:origin_red_homeland.solar_system = {
            red_origin_start_spawn_effect = { INITIALIZER = soviet_union_system_2_init }
            red_origin_start_spawn_effect = { INITIALIZER = soviet_union_system_3_init }
            red_origin_start_hyperlane_effect = {
                ORIGINAL_STAR_SYSTEM = event_target:red_homeland_2.solar_system
                SECOND_STAR_SYSTEM = event_target:origin_red_homeland.solar_system
            }
            red_origin_start_hyperlane_effect = {
                ORIGINAL_STAR_SYSTEM = event_target:red_homeland_3.solar_system
                SECOND_STAR_SYSTEM = event_target:origin_red_homeland.solar_system
            }
        }
    }

    # Vassal Backup
    if = { # Backup for vassal 1
        limit = {
            any_system = { has_star_flag = soviet_union_system_2_flag }
            NOT = { any_system = { has_star_flag = soviet_union_system_4_flag } }
        }
        red_origin_vassal_backup_effect = {
            SYSTEM_FLAG = soviet_union_system_2_flag
            INITIALIZER = soviet_union_system_4_init
            ORIGINAL_STAR_SYSTEM = event_target:red_homeland_4.solar_system
        }
    }
    if = { # Backup for vassal 2
        limit = {
            any_system = { has_star_flag = soviet_union_system_2_flag }
            NOR = {
                galaxy_size = tiny
                any_system = { has_star_flag = soviet_union_system_5_flag }
            }
        }
        red_origin_vassal_backup_effect = {
            SYSTEM_FLAG = soviet_union_system_2_flag
            INITIALIZER = soviet_union_system_5_init
            ORIGINAL_STAR_SYSTEM = event_target:red_homeland_5.solar_system
        }
    }
    if = { # Backup for vassal 3
        limit = {
            any_system = { has_star_flag = soviet_union_system_3_flag }
            NOR = {
                galaxy_size = tiny
                galaxy_size = small
                any_system = { has_star_flag = soviet_union_system_6_flag }
            }
        }
        red_origin_vassal_backup_effect = {
            SYSTEM_FLAG = soviet_union_system_3_flag
            INITIALIZER = soviet_union_system_6_init
            ORIGINAL_STAR_SYSTEM = event_target:red_homeland_6.solar_system
        }
    }
    if = { # Backup for vassal 4
        limit = {
            any_system = { has_star_flag = soviet_union_system_3_flag }
            NOR = {
                galaxy_size = tiny
                galaxy_size = small
                galaxy_size = medium
                any_system = { has_star_flag = soviet_union_system_7_flag }
            }
        }
        red_origin_vassal_backup_effect = {
            SYSTEM_FLAG = soviet_union_system_3_flag
            INITIALIZER = soviet_union_system_7_init
            ORIGINAL_STAR_SYSTEM = event_target:red_homeland_7.solar_system
        }
    }

    # Modifier to reduce influence
    event_target:origin_red_homeland_country = {
        add_modifier = {
            modifier = imperial_vassal_ai_modifier
            days = -1
        }
    }

    # Rival Country
    if = {
        limit = {
            OR = {
                AND = {
                    is_multiplayer = yes
                    NOT = {
                        count_country = {
                            count >= 2
                            limit = {
                                is_ai = no
                                has_origin = origin_red_satellite
                            }
                        }
                    }
                }
                is_multiplayer = no
            }
        }
        random_country = {
            limit = {
                is_ai = yes
                has_origin = origin_red_satellite
            }
            set_country_flag = origin_red_satellite_rival_country
        }
    }

    # Startup event for vassals
    every_playable_country = {
        limit = { has_origin = origin_red_satellite }
        country_event = { id = red_origin.5700 }
        if = {
            limit = {
                always = yes
            }
            country_event = {
                id = red_origin.5703
                days = 1
            }
        }
        else = {
            country_event = { id = red_origin.5710 }
        }
    }
    every_country = {
        limit = {
            is_ai = yes
            has_origin = origin_red_satellite
        }
        country_event = { id = red_origin.5711 }
    }
}

red_origin_start_hyperlane_effect = {
    if = {
        limit = {
            NOT = {
                $ORIGINAL_STAR_SYSTEM$ = {
                    has_hyperlane_to = $SECOND_STAR_SYSTEM$
                }
            }
        }
        add_hyperlane = {
            from = $ORIGINAL_STAR_SYSTEM$
            to = $SECOND_STAR_SYSTEM$
        }
    }
}

red_origin_start_spawn_effect = {
    spawn_system = {
        min_distance = 10
        max_distance = 30
        max_jumps = 0
        hyperlane = yes
        initializer = $INITIALIZER$
    }
}

red_origin_vassal_backup_effect = {
    random_system = {
        limit = {
            has_star_flag = $SYSTEM_FLAG$
        }
        save_event_target_as = this_system

        red_origin_start_spawn_effect = { INITIALIZER = $INITIALIZER$ }
        red_origin_start_hyperlane_effect = {
            ORIGINAL_STAR_SYSTEM = $ORIGINAL_STAR_SYSTEM$
            SECOND_STAR_SYSTEM = event_target:this_system
        }
    }
}

#开局科技
give_physics_tech_tier_1_effect = {
    give_technology = { message = no tech = tech_basic_science_lab_2 }
    give_technology = { message = no tech = tech_space_science_1 }
    give_technology = { message = no tech = tech_space_science_2 }
    give_technology = { message = no tech = tech_physics_1 }
    give_technology = { message = no tech = tech_administrative_ai }
    give_technology = { message = no tech = tech_cryostasis_1 }
    give_technology = { message = no tech = tech_automated_exploration }
    give_technology = { message = no tech = tech_combat_computers_1 }
    give_technology = { message = no tech = tech_auxiliary_fire_control }
    give_technology = { message = no tech = tech_encryption_1 }
    give_technology = { message = no tech = tech_decryption_1 }
    give_technology = { message = no tech = tech_fusion_power }
    give_technology = { message = no tech = tech_reactor_boosters_2 }
    give_technology = { message = no tech = tech_reactor_boosters_3 }
    give_technology = { message = no tech = tech_shields_2 }
    give_technology = { message = no tech = tech_power_plant_2 }
    give_technology = { message = no tech = tech_power_hub_1 }
    give_technology = { message = no tech = tech_lasers_2 }
    give_technology = { message = no tech = tech_auto_buildings }
}

give_physics_tech_tier_2_effect = {
    give_technology = { message = no tech = tech_curator_lab }
    if = {
        limit = {
            has_ancrel = yes
        }
        give_technology = { message = no tech = tech_archeology_lab_ancrel }
    }
    else = {
        give_technology = { message = no tech = tech_archeology_lab }
    }
    give_technology = { message = no tech = tech_space_science_3 }
    give_technology = { message = no tech = tech_space_science_4 }
    give_technology = { message = no tech = tech_physics_2 }
    give_technology = { message = no tech = tech_self_aware_logic }
    if = {
        limit = {
            OR = {
                is_gestalt = no
                has_valid_civic = civic_machine_servitor
            }
        }
        give_technology = { message = no tech = tech_consumer_good_refinement_1 }
    }
    give_technology = { message = no tech = tech_encryption_2 }
    give_technology = { message = no tech = tech_decryption_2 }
    give_technology = { message = no tech = tech_cold_fusion_power }
    give_technology = { message = no tech = tech_shields_3 }
    give_technology = { message = no tech = tech_shield_rechargers_1 }
    if = {
        limit = {
            NOT = { has_origin = origin_true_yuht }
        }
        give_technology = { message = no tech = tech_sensors_2 }
    }
    give_technology = { message = no tech = tech_power_plant_3 }
    give_technology = { message = no tech = tech_power_hub_2 }
    if = {
        limit = {
            NOT = { has_origin = origin_true_yuht }
        }
        give_technology = { message = no tech = tech_hyper_drive_2 }
    }
    give_technology = { message = no tech = tech_ftl_inhibitor }
    give_technology = { message = no tech = tech_lasers_3 }
    give_technology = { message = no tech = tech_pd_tracking_2 }
    give_technology = { message = no tech = tech_mine_volatile_motes }
    give_technology = { message = no tech = tech_volatile_motes }
    give_technology = { message = no tech = tech_adv_auto_buildings_1 }
}

give_physics_tech_tier_3_effect = {
    give_technology = { message = no tech = tech_physics_3 }
    give_technology = { message = no tech = tech_space_science_5 }
    give_technology = { message = no tech = tech_combat_computers_2 }
    give_technology = { message = no tech = tech_encryption_3 }
    give_technology = { message = no tech = tech_decryption_3 }
    give_technology = { message = no tech = tech_antimatter_power }
    give_technology = { message = no tech = tech_reactor_boosters_3 }
    give_technology = { message = no tech = tech_shields_4 }
    give_technology = { message = no tech = tech_planetary_shield_generator }
    if = {
        limit = {
            NOT = { has_origin = origin_true_yuht }
        }
        give_technology = { message = no tech = tech_sensors_3 }
    }
    give_technology = { message = no tech = tech_power_plant_4 }
    give_technology = { message = no tech = tech_mine_dark_matter }
    give_technology = { message = no tech = tech_lasers_4 }
}

give_physics_tech_tier_4_effect = {
    give_technology = { message = no tech = tech_physics_4 }
    if = {
        limit = {
            NOT = { has_ethic = ethic_gestalt_consciousness }
        }
        give_technology = { message = no tech = tech_sapient_ai }
    }
    if = {
        limit = {
            has_ethic = ethic_gestalt_consciousness
        }
        give_technology = { message = no tech = tech_positronic_implants }
    }
    if = {
        limit = {
            NOT = { has_ethic = ethic_gestalt_consciousness }
        }
        give_technology = { message = no tech = tech_combat_computers_3 }
    }
    if = {
        limit = {
            has_ethic = ethic_gestalt_consciousness
        }
        give_technology = { message = no tech = tech_combat_computers_autonomous }
    }
    give_technology = { message = no tech = tech_synchronized_defences }
    if = {
        limit = {
            country_uses_consumer_goods = yes
        }
        give_technology = { message = no tech = tech_consumer_good_refinement_2 }
    }
    give_technology = { message = no tech = tech_encryption_3 }
    give_technology = { message = no tech = tech_decryption_3 }
    give_technology = { message = no tech = tech_zero_point_power }
    give_technology = { message = no tech = tech_shields_5 }
    if = {
        limit = {
            NOT = { has_origin = origin_true_yuht }
        }
        give_technology = { message = no tech = tech_sensors_4 }
    }
}

give_physics_tech_tier_5_effect = {
    give_technology = { message = no tech = tech_physics_5 }
    give_technology = { message = no tech = tech_shield_hardeners_2 }
    give_technology = { message = no tech = tech_jump_drive_1 }
    give_technology = { message = no tech = tech_science_nexus }
    give_technology = { message = no tech = tech_sentry_array }
    give_technology = { message = no tech = tech_gateway_construction }
    give_technology = { message = no tech = tech_quantum_catapult }
    give_technology = { message = no tech = tech_jump_drive_1 }
    give_technology = { message = no tech = tech_dark_matter_detection }
}

give_physics_research_option_tier_5_effect = {
    add_research_option = tech_shield_hardeners_2
    add_research_option = tech_jump_drive_1
    add_research_option = tech_science_nexus
    add_research_option = tech_sentry_array
    add_research_option = tech_gateway_construction
    add_research_option = tech_quantum_catapult
    add_research_option = tech_jump_drive_1
    add_research_option = tech_dark_matter_detection
}

give_engineering_tech_tier_1_effect = {
    if = {
        limit = {
            country_uses_bio_ships = no
        }
        give_technology = { message = no tech = tech_corvette_build_speed }
        give_technology = { message = no tech = tech_corvette_hull_1 }
    }
    give_technology = { message = no tech = tech_strike_craft_1 }
    give_technology = { message = no tech = tech_ship_armor_2 }
    give_technology = { message = no tech = tech_powered_exoskeletons }
    give_technology = { message = no tech = tech_space_mining_1 }
    give_technology = { message = no tech = tech_space_mining_2 }
    give_technology = { message = no tech = tech_mining_1 }
    give_technology = { message = no tech = tech_mineral_purification_1 }
    give_technology = { message = no tech = tech_alloys_1 }
    give_technology = { message = no tech = tech_luxuries_1 }
    give_technology = { message = no tech = tech_engineering_1 }
    give_technology = { message = no tech = tech_robotic_workers }
    give_technology = { message = no tech = tech_afterburners_1 }
    give_technology = { message = no tech = tech_assembly_pattern }
    give_technology = { message = no tech = tech_mass_drivers_2 }
    give_technology = { message = no tech = tech_missiles_2 }
}

give_engineering_tech_tier_2_effect = {
    if = {
        limit = {
            country_uses_bio_ships = no
        }
        give_technology = { message = no tech = tech_destroyers }
        give_technology = { message = no tech = tech_corvette_hull_2 }
        give_technology = { message = no tech = tech_destroyer_build_speed }
        give_technology = { message = no tech = tech_destroyer_hull_1 }
    }
    give_technology = { message = no tech = tech_starbase_3 }
    give_technology = { message = no tech = tech_modular_engineering }
    give_technology = { message = no tech = tech_strike_craft_2 }
    give_technology = { message = no tech = tech_ship_armor_3 }
    give_technology = { message = no tech = tech_crystal_armor_1 }
    give_technology = { message = no tech = tech_thrusters_2 }
    give_technology = { message = no tech = tech_defense_platform_hull_1 }
    give_technology = { message = no tech = tech_space_mining_3 }
    give_technology = { message = no tech = tech_space_mining_4 }
    give_technology = { message = no tech = tech_mining_2 }
    give_technology = { message = no tech = tech_mineral_purification_2 }
    give_technology = { message = no tech = tech_advanced_metallurgy_1 }
    give_technology = { message = no tech = tech_engineering_2 }
    give_technology = { message = no tech = tech_droid_workers }
    give_technology = { message = no tech = tech_housing_1 }
    give_technology = { message = no tech = tech_mass_drivers_3 }
    give_technology = { message = no tech = tech_missiles_3 }
    give_technology = { message = no tech = tech_flak_batteries_2 }
    give_technology = { message = no tech = tech_mine_rare_crystals }
    give_technology = { message = no tech = tech_mine_exotic_gases }
    give_technology = { message = no tech = tech_rare_crystals }
    give_technology = { message = no tech = tech_exotic_gases }
}

give_engineering_tech_tier_3_effect = {
    if = {
        limit = {
            OR = {
                is_machine_empire = no
                has_civic = civic_machine_assimilator
            }
        }
        give_technology = { message = no tech = tech_integrated_cybernetics }
    }
    if = {
        limit = {
            country_uses_bio_ships = no
        }
        give_technology = { message = no tech = tech_cruisers }
        give_technology = { message = no tech = tech_destroyer_hull_2 }
        give_technology = { message = no tech = tech_cruiser_build_speed }
        give_technology = { message = no tech = tech_cruiser_hull_1 }
    }
    give_technology = { message = no tech = tech_engineering_3 }
    give_technology = { message = no tech = tech_starbase_4 }
    give_technology = { message = no tech = tech_habitat_1 }
    give_technology = { message = no tech = tech_strike_craft_3 }
    give_technology = { message = no tech = tech_ship_armor_4 }
    give_technology = { message = no tech = tech_thrusters_3 }
    give_technology = { message = no tech = tech_space_mining_5 }
    give_technology = { message = no tech = tech_mining_3 }
    give_technology = { message = no tech = tech_alloys_2 }
    give_technology = { message = no tech = tech_luxuries_2 }
    give_technology = { message = no tech = tech_afterburners_2 }
    give_technology = { message = no tech = tech_housing_2 }
    give_technology = { message = no tech = tech_mine_living_metal }
    give_technology = { message = no tech = tech_mass_drivers_4 }
    give_technology = { message = no tech = tech_missiles_4 }
}

give_engineering_tech_tier_4_effect = {
    if = {
        limit = {
            country_uses_bio_ships = no
        }
        give_technology = { message = no tech = tech_battleships }
        give_technology = { message = no tech = tech_cruiser_hull_2 }
        give_technology = { message = no tech = tech_battleship_build_speed }
        give_technology = { message = no tech = tech_battleship_hull_1 }
    }
    give_technology = { message = no tech = tech_engineering_4 }
    give_technology = { message = no tech = tech_starbase_5 }
    give_technology = { message = no tech = tech_habitat_2 }
    give_technology = { message = no tech = tech_habitat_3 }
    give_technology = { message = no tech = tech_strike_craft_skrand }
    give_technology = { message = no tech = tech_ship_armor_5 }
    give_technology = { message = no tech = tech_crystal_armor_2 }
    give_technology = { message = no tech = tech_thrusters_4 }
    give_technology = { message = no tech = tech_advanced_metallurgy_2 }
    if = {
        limit = {
            NOR = {
                has_ethic = "ethic_gestalt_consciousness"
                is_individual_machine = yes
            }
        }
        give_technology = { message = no tech = tech_synthetic_workers }
    }
    if = {
        limit = {
            NOR = {
                has_ethic = "ethic_gestalt_consciousness"
                is_individual_machine = yes
            }
        }
        give_technology = { message = no tech = tech_synthetic_leaders }
    }
    if = {
        limit = {
            NOT = { has_ethic = ethic_gestalt_consciousness }
        }
        give_technology = { message = no tech = tech_robot_assembly_complex }
    }
}

give_engineering_tech_tier_5_effect = {
    give_technology = { message = no tech = tech_engineering_5 }
    give_technology = { message = no tech = tech_titans }
    give_technology = { message = no tech = tech_juggernaut }
    give_technology = { message = no tech = tech_battleship_hull_2 }
    give_technology = { message = no tech = tech_titan_hull_1 }
    give_technology = { message = no tech = tech_titan_hull_2 }
    give_technology = { message = no tech = tech_armor_hardeners_2 }
    give_technology = { message = no tech = tech_nanite_repair_system }
    give_technology = { message = no tech = tech_nanite_autocannon }
    give_technology = { message = no tech = tech_nanite_flak_batteries }
    give_technology = { message = no tech = tech_mega_engineering }
    give_technology = { message = no tech = tech_mine_living_metal }
}

give_engineering_research_option_tier_5_effect = {
    add_research_option = tech_titans
    add_research_option = tech_juggernaut
    add_research_option = tech_battleship_hull_2
    add_research_option = tech_titan_hull_1
    add_research_option = tech_titan_hull_2
    add_research_option = tech_armor_hardeners_2
    add_research_option = tech_nanite_repair_system
    add_research_option = tech_nanite_autocannon
    add_research_option = tech_nanite_flak_batteries
    add_research_option = tech_mega_engineering
    add_research_option = tech_mine_living_metal
}

give_society_tech_tier_1_effect = {
    if = {
        limit = {
            is_regular_empire = yes
        }
        give_technology = { message = no tech = tech_space_trading }
    }
    if = {
        limit = {
            country_uses_bio_ships = yes
        }
        give_technology = { message = no tech = tech_mauler_build_speed }
        give_technology = { message = no tech = tech_mauler_growth_1 }
        give_technology = { message = no tech = tech_mauler_growth_2 }
        give_technology = { message = no tech = tech_weavers }
        give_technology = { message = no tech = tech_weaver_build_speed }
        give_technology = { message = no tech = tech_weaver_bio_healing_1 }
        give_technology = { message = no tech = tech_weaver_bio_evasion_1 }
        give_technology = { message = no tech = tech_weaver_bio_fire_rate_1 }
        give_technology = { message = no tech = tech_weaver_bio_confuser_1 }
        give_technology = { message = no tech = tech_weaver_bio_anti_evasion_1 }
        give_technology = { message = no tech = tech_weaver_bio_anti_fire_rate_1 }
    }
    give_technology = { message = no tech = tech_eco_simulation }
    give_technology = { message = no tech = tech_hydroponics }
    give_technology = { message = no tech = tech_food_processing_1 }
    give_technology = { message = no tech = tech_society_1 }
    give_technology = { message = no tech = tech_building_school_1 }
    if = {
        limit = {
            is_regular_empire = yes
        }
        give_technology = { message = no tech = tech_alien_life_studies }
    }
    if = {
        limit = {
            is_regular_empire = yes
        }
        give_technology = { message = no tech = tech_frontier_health }
    }
    give_technology = { message = no tech = tech_dense_jungle }
    give_technology = { message = no tech = tech_quicksand_basin }
    give_technology = { message = no tech = tech_noxious_swamp }
    give_technology = { message = no tech = tech_massive_glacier }
    give_technology = { message = no tech = tech_toxic_kelp }
    give_technology = { message = no tech = tech_deep_sinkhole }
    if = {
        limit = {
            OR = {
                NOT = { has_authority = auth_machine_intelligence }
                has_civic = civic_machine_assimilator
                has_civic = civic_machine_servitor
            }
        }
        give_technology = { message = no tech = tech_genome_mapping }
    }
    give_technology = { message = no tech = tech_ground_defense_planning }
    give_technology = { message = no tech = tech_planetary_unification }
    give_technology = { message = no tech = tech_adaptive_bureaucracy }
    if = {
        limit = {
            is_regular_empire = yes
        }
        give_technology = { message = no tech = tech_neural_implants }
    }
    if = {
        limit = {
            is_gestalt = no
        }
        give_technology = { message = no tech = tech_hyper_entertainment_forum }
    }
    if = {
        limit = {
            NOR = {
                has_ethic = ethic_spiritualist
                has_ethic = ethic_fanatic_spiritualist
                has_valid_civic = civic_machine_servitor
            }
        }
        give_technology = { message = no tech = tech_heritage_site }
    }
}

give_society_tech_tier_2_effect = {
    if = {
        limit = {
            country_uses_bio_ships = yes
        }
        give_technology = { message = no tech = tech_weaver_growth_1 }
        give_technology = { message = no tech = tech_weaver_growth_2 }
        give_technology = { message = no tech = tech_weaver_bio_healing_2 }
        give_technology = { message = no tech = tech_weaver_bio_evasion_2 }
        give_technology = { message = no tech = tech_weaver_bio_fire_rate_2 }
        give_technology = { message = no tech = tech_weaver_bio_confuser_2 }
        give_technology = { message = no tech = tech_weaver_bio_anti_evasion_2 }
        give_technology = { message = no tech = tech_weaver_bio_anti_fire_rate_2 }
    }
    give_technology = { message = no tech = tech_gene_crops }
    give_technology = { message = no tech = tech_society_2 }
    give_technology = { message = no tech = tech_arcane_deciphering }
    give_technology = { message = no tech = tech_building_school_2 }
    give_technology = { message = no tech = tech_federal_state }
    if = {
        limit = {
            OR = {
                is_machine_empire = no
                has_civic = civic_machine_assimilator
                has_civic = civic_machine_servitor
            }
        }
        give_technology = { message = no tech = tech_colonization_2 }
    }
    if = {
        limit = {
            OR = {
                is_machine_empire = no
                has_civic = civic_machine_assimilator
                has_civic = civic_machine_servitor
            }
        }
        give_technology = { message = no tech = tech_colonization_3 }
    }
    if = {
        limit = {
            is_gestalt = no
        }
        give_technology = { message = no tech = tech_frontier_hospital }
    }
    give_technology = { message = no tech = tech_mountain_range }
    give_technology = { message = no tech = tech_volcano }
    give_technology = { message = no tech = tech_dangerous_wildlife }
    give_technology = { message = no tech = tech_terrestrial_sculpting }
    if = {
        limit = {
            OR = {
                NOT = { has_authority = auth_machine_intelligence }
                has_civic = civic_machine_assimilator
            }
        }
        give_technology = { message = no tech = tech_vitality_boosters }
    }
    if = {
        limit = {
            NOT = {
                has_valid_civic = civic_fanatic_purifiers
                #has_valid_civic = civic_machine_terminator # covered by not being machine
                #has_valid_civic = civic_hive_devouring_swarm # can uplift to make delicious
            }
            OR = {
                NOT = { has_authority = auth_machine_intelligence }
                has_civic = civic_machine_assimilator
                has_civic = civic_machine_servitor
            }
        }
        give_technology = { message = no tech = tech_epigenetic_triggers }
    }
    if = {
        limit = {
            OR = {
                NOT = { has_authority = auth_machine_intelligence }
                has_civic = civic_machine_assimilator
            }
        }
        give_technology = { message = no tech = tech_cloning }
    }
    if = {
        limit = {
            OR = {
                NOT = { has_authority = auth_machine_intelligence }
                has_civic = civic_machine_assimilator
            }
        }
        give_technology = { message = no tech = tech_gene_banks }
    }
    give_technology = { message = no tech = tech_doctrine_fleet_size_1 }
    give_technology = { message = no tech = tech_doctrine_fleet_size_2 }
    give_technology = { message = no tech = tech_interstellar_fleet_traditions }
    give_technology = { message = no tech = tech_doctrine_navy_size_1 }
    give_technology = { message = no tech = tech_global_defense_grid }
    give_technology = { message = no tech = tech_galactic_ambitions }
    give_technology = { message = no tech = tech_interstellar_campaigns }
    give_technology = { message = no tech = tech_colonial_centralization }
    give_technology = { message = no tech = tech_planetary_infrastructure_1 }
    if = {
        limit = {
            NOT = { has_ethic = ethic_gestalt_consciousness	}
        }
        give_technology = { message = no tech = tech_subdermal_stimulation }
    }
    give_technology = { message = no tech = tech_effective_bureaucracy }
    give_technology = { message = no tech = tech_colonial_bureaucracy }
    if = {
        limit = {
            NOT = { has_ethic = ethic_gestalt_consciousness }
        }
        give_technology = { message = no tech = tech_living_state }
    }
    if = {
        limit = {
            has_ethic = ethic_gestalt_consciousness
        }
        give_technology = { message = no tech = tech_autonomous_agents }
    }
    if = {
        limit = {
            NOT = { has_ethic = ethic_gestalt_consciousness }
        }
        give_technology = { message = no tech = tech_artificial_moral_codes }
    }
    if = {
        limit = {
            is_gestalt = yes
        }
        give_technology = { message = no tech = tech_unity_of_purpose }
    }
    if = {
        limit = {
            has_ethic = ethic_gestalt_consciousness
        }
        give_technology = { message = no tech = tech_holographic_rituals }
    }
    if = {
        limit = {
            is_hive_empire = yes
        }
        give_technology = { message = no tech = tech_hive_cluster }
    }
    if = {
        limit = {
            is_gestalt = no
        }
        give_technology = { message = no tech = tech_slave_colonies }
    }
    if = {
        limit = {
            is_regular_empire = yes
        }
        give_technology = { message = no tech = tech_xeno_diplomacy }
    }
    give_technology = { message = no tech = tech_capital_productivity_1 }
}

give_society_tech_tier_3_effect = {
    if = {
        limit = {
            country_uses_bio_ships = yes
        }
        give_technology = { message = no tech = tech_harbingers }
        give_technology = { message = no tech = tech_harbinger_build_speed }
        give_technology = { message = no tech = tech_harbinger_growth_1 }
        give_technology = { message = no tech = tech_harbinger_growth_2 }
        give_technology = { message = no tech = tech_mandibles_2 }
        give_technology = { message = no tech = tech_weaver_bio_healing_3 }
        give_technology = { message = no tech = tech_weaver_bio_evasion_3 }
        give_technology = { message = no tech = tech_weaver_bio_fire_rate_3 }
        give_technology = { message = no tech = tech_weaver_bio_confuser_3 }
        give_technology = { message = no tech = tech_weaver_bio_anti_evasion_3 }
        give_technology = { message = no tech = tech_weaver_bio_anti_fire_rate_3 }
    }
    if = {
        limit = {
            is_gestalt = no
        }
        give_technology = { message = no tech = tech_interstellar_economics }
    }
    if = {
        limit = {
            is_gestalt = yes
        }
        give_technology = { message = no tech = tech_interstellar_economics_gestalt }
    }
    if = {
        limit = {
            is_gestalt = no
        }
        give_technology = { message = no tech = tech_interstellar_society }
    }
    if = {
        limit = {
            is_gestalt = yes
        }
        give_technology = { message = no tech = tech_Interstellar_consciousness }
    }
    give_technology = { message = no tech = tech_society_3 }
    give_technology = { message = no tech = tech_nano_vitality_crops }
    give_technology = { message = no tech = tech_food_processing_2 }
    give_technology = { message = no tech = tech_gene_tailoring }
    give_technology = { message = no tech = tech_refit_standards }
    give_technology = { message = no tech = tech_combat_training }
    give_technology = { message = no tech = tech_psionic_theory }
    give_technology = { message = no tech = tech_galactic_bureaucracy }
    give_technology = { message = no tech = tech_centralized_command }
    give_technology = { message = no tech = tech_building_school_3 }
    give_technology = { message = no tech = tech_planetary_military_network }
    give_technology = { message = no tech = tech_deep_space_citadel }
    if = {
        limit = {
            has_authority = auth_machine_intelligence
        }
        give_technology = { message = no tech = tech_resource_processing_algorithms }
    }
    if = {
        limit = {
            OR = {
                is_gestalt = no
                has_valid_civic = civic_machine_servitor
            }
        }
        give_technology = { message = no tech = tech_paradise_dome }
    }
    if = {
        limit = {
            NOR = {
                has_ethic = ethic_spiritualist
                has_ethic = ethic_fanatic_spiritualist
                has_valid_civic = civic_machine_servitor
            }
        }
        give_technology = { message = no tech = tech_autocurating_vault }
    }
    if = {
        limit = {
            has_valid_civic = civic_agrarian_idyll
        }
        give_technology = { message = no tech = tech_housing_agrarian_idyll }
    }
}

give_society_tech_tier_4_effect = {
    if = {
        limit = {
            country_uses_bio_ships = yes
        }
        give_technology = { message = no tech = tech_stingers }
        give_technology = { message = no tech = tech_stinger_build_speed }
        give_technology = { message = no tech = tech_stinger_growth_1 }
        give_technology = { message = no tech = tech_stinger_growth_2 }
        give_technology = { message = no tech = tech_growth_chamber_1 }
        give_technology = { message = no tech = tech_growth_chamber_2 }
        give_technology = { message = no tech = tech_mandibles_3 }
        give_technology = { message = no tech = tech_weaver_bio_healing_4 }
        give_technology = { message = no tech = tech_weaver_bio_evasion_4 }
        give_technology = { message = no tech = tech_weaver_bio_fire_rate_4 }
        give_technology = { message = no tech = tech_weaver_bio_confuser_4 }
        give_technology = { message = no tech = tech_weaver_bio_anti_evasion_4 }
        give_technology = { message = no tech = tech_weaver_bio_anti_fire_rate_4 }
    }
    give_technology = { message = no tech = tech_society_4 }
    if = {
        limit = {
            NOT = { has_ethic = ethic_gestalt_consciousness }
        }
        give_technology = { message = no tech = tech_galactic_markets }
    }
    if = {
        limit = {
            is_machine_empire = no
        }
        give_technology = { message = no tech = tech_nutrient_replication }
    }
    give_technology = { message = no tech = tech_colonization_5 }
    give_technology = { message = no tech = tech_climate_restoration }
    if = {
        limit = {
            NOR = {
                is_machine_empire = yes
                is_natural_design_empire = yes
                is_individual_machine = yes
            }
        }
        give_technology = { message = no tech = tech_gene_seed_purification }
    }
    if = {
        limit = {
            NOR = {
                is_machine_empire = yes
                is_natural_design_empire = yes
                is_individual_machine = yes
            }
        }
        give_technology = { message = no tech = tech_morphogenetic_field_mastery }
    }
    if = {
        limit = {
            NOR = {
                is_machine_empire = yes
                is_natural_design_empire = yes
            }
        }
        give_technology = { message = no tech = tech_capacity_boosters }
    }
    give_technology = { message = no tech = tech_doctrine_fleet_size_4 }
    give_technology = { message = no tech = tech_doctrine_navy_size_4 }
    give_technology = { message = no tech = tech_manifest_destiny }
    give_technology = { message = no tech = tech_galactic_campaigns }
    give_technology = { message = no tech = tech_planetary_infrastructure_2 }
    give_technology = { message = no tech = tech_tracking_implants }
    if = {
        limit = {
            OR = {
                has_ethic = ethic_spiritualist
                has_ethic = ethic_fanatic_spiritualist
                AND = {
                    is_gestalt = no
                    has_make_spiritualist_perk = yes
                }
            }
        }
        give_technology = { message = no tech = tech_transcendent_faith }
    }
    give_technology = { message = no tech = tech_ascension_theory }
    give_technology = { message = no tech = tech_capital_productivity_3 }
    if = {
        limit = {
            is_machine_empire = yes
        }
        give_technology = { message = no tech = tech_node_reformatting_3 }
    }
    if = {
        limit = {
            is_hive_empire = yes
        }
        give_technology = { message = no tech = tech_node_culling_3 }
    }
}

give_society_tech_tier_5_effect = {
    if = {
        limit = {
            country_uses_bio_ships = yes
        }
        give_technology = { message = no tech = tech_weaver_bio_healing_5 }
        give_technology = { message = no tech = tech_weaver_bio_evasion_5 }
        give_technology = { message = no tech = tech_weaver_bio_fire_rate_5 }
        give_technology = { message = no tech = tech_weaver_bio_confuser_5 }
        give_technology = { message = no tech = tech_weaver_bio_anti_evasion_5 }
        give_technology = { message = no tech = tech_weaver_bio_anti_fire_rate_5 }
    }
    give_technology = { message = no tech = tech_society_5 }
    give_technology = { message = no tech = tech_archaeo_pk_devolving_beam }
    give_technology = { message = no tech = tech_strategic_coordination }
    give_technology = { message = no tech = tech_interstellar_assembly }
    give_technology = { message = no tech = tech_mega_art }
    give_technology = { message = no tech = tech_mega_shipyard }
    give_technology = { message = no tech = tech_ascension_theory }
}

give_society_research_option_tier_5_effect = {
    add_research_option = tech_archaeo_pk_devolving_beam
    add_research_option = tech_strategic_coordination
    add_research_option = tech_interstellar_assembly
    add_research_option = tech_mega_art
    add_research_option = tech_mega_shipyard
    add_research_option = tech_ascension_theory
}

generate_royal_family = {
    if = {
        limit = {
            ruler = {
                leader_class = scientist
            }
        }
        create_leader = {
            class = scientist
            name = random
            species = owner_main_species
            effect = {
                remove_trait = leader_trait_eci_royalty
                add_trait_no_notify = leader_trait_eci_king
                set_council_position = councilor_king
            }
        }
        create_leader = {
            class = scientist
            name = random
            species = owner_main_species
            effect = {
                remove_trait = leader_trait_eci_royalty
                add_trait_no_notify = leader_trait_eci_heir
            }
        }
    }
    else_if = {
        limit = {
            ruler = {
                leader_class = commander
            }
        }
        create_leader = {
            class = commander
            name = random
            species = owner_main_species
            effect = {
                remove_trait = leader_trait_eci_royalty
                add_trait_no_notify = leader_trait_eci_king
                set_council_position = councilor_king
            }
        }
        create_leader = {
            class = commander
            name = random
            species = owner_main_species
            effect = {
                remove_trait = leader_trait_eci_royalty
                add_trait_no_notify = leader_trait_eci_heir
            }
        }
    }
    else_if = {
        limit = {
            ruler = {
                leader_class = commander
            }
        }
        create_leader = {
            class = commander
            name = random
            species = owner_main_species
            effect = {
                remove_trait = leader_trait_eci_royalty
                add_trait_no_notify = leader_trait_eci_king
                set_council_position = councilor_king
            }
        }
        create_leader = {
            class = commander
            name = random
            species = owner_main_species
            effect = {
                remove_trait = leader_trait_eci_royalty
                add_trait_no_notify = leader_trait_eci_heir
            }
        }
    }
    else = {
        create_leader = {
            class = official
            name = random
            species = owner_main_species
            effect = {
                remove_trait = leader_trait_eci_royalty
                add_trait_no_notify = leader_trait_eci_king
                set_council_position = councilor_king
            }
        }
        create_leader = {
            class = official
            name = random
            species = owner_main_species
            effect = {
                remove_trait = leader_trait_eci_royalty
                add_trait_no_notify = leader_trait_eci_heir
            }
        }
    }
}

generate_random_royalty = {
    random_list = {
        1 = {
            create_leader = {
                class = scientist
                name = random
                species = owner_main_species
                effect = {
                    add_trait_no_notify = leader_trait_eci_royalty
                }
            }
        }
        1 = {
            create_leader = {
                class = official
                name = random
                species = owner_main_species
                effect = {
                    add_trait_no_notify = leader_trait_eci_royalty
                }
            }
        }
        1 = {
            create_leader = {
                class = commander
                name = random
                species = owner_main_species
                effect = {
                    add_trait_no_notify = leader_trait_eci_royalty
                }
            }
        }
    }
}