edict_size_faction_effect = {
	base = 1
	mult = value:edict_faction_effect
	mult = value:edict_size_effect
}
edict_faction_effect = {
	base = -1
	modifier = {
		add = -0.3
		exists = owner.leader.pop_faction
	}
	modifier = {
		add = owner.leader.pop_faction.trigger:support
		exists = owner.leader.pop_faction
	}
	mult = -1
}

tech_weight_likelihood = {
	base = 1.25
	modifier = {
		add = 1.25
		OR = {
			has_valid_civic = civic_learning_society
			has_valid_civic = civic_learning_society_corporate
		}
	}
}

ethic_planet_pops = {
	base = 1
	mult = trigger:count_pops
	#add = 1
}

RELATIVE_POWER_FLEET_OVERLORD = {
	base = 2
	mult = owner.trigger:fleet_power
	divide = owner.overlord.trigger:fleet_power
	mult = owner.trigger:fleet_power
	divide = owner.overlord.trigger:fleet_power
}

RELATIVE_POWER_TECHNOLOGY_OVERLORD = {
	base = 1
	complex_trigger_modifier = {
		trigger = tech_unlocked_ratio
		trigger_scope = owner
		parameters = {
			who = owner.overlord 
		}
		mode = mult
		mult = 1
	}
	complex_trigger_modifier = {
		trigger = tech_unlocked_ratio
		trigger_scope = owner
		parameters = {
			who = owner.overlord 
		}
		mode = mult
		mult = 1
	}
}

RELATIVE_POWER_ECONOMY_OVERLORD_base = {
	base = 0
	complex_trigger_modifier = {
		trigger = resource_income_compare
		trigger_scope = owner
		parameters = {
			resource = energy
		}
		mode = add
		mult = 1
	}
	complex_trigger_modifier = {
		trigger = resource_income_compare
		trigger_scope = owner
		parameters = {
			resource = minerals
		}
		mode = add
		mult = 1
	}
	complex_trigger_modifier = {
		trigger = resource_income_compare
		trigger_scope = owner
		parameters = {
			resource = food
		}
		mode = add
		mult = 1
	}
	complex_trigger_modifier = {
		trigger = resource_income_compare
		trigger_scope = owner
		parameters = {
			resource = consumer_goods
		}
		mode = add
		mult = 2
	}
	complex_trigger_modifier = {
		trigger = resource_income_compare
		trigger_scope = owner
		parameters = {
			resource = alloys
		}
		mode = add
		mult = 4
	}
	complex_trigger_modifier = {
		trigger = resource_income_compare
		trigger_scope = owner
		parameters = {
			resource = volatile_motes
		}
		mode = add
		mult = 10
	}
	complex_trigger_modifier = {
		trigger = resource_income_compare
		trigger_scope = owner
		parameters = {
			resource = exotic_gases
		}
		mode = add
		mult = 10
	}
	complex_trigger_modifier = {
		trigger = resource_income_compare
		trigger_scope = owner
		parameters = {
			resource = rare_crystals
		}
		mode = add
		mult = 10
	}
	complex_trigger_modifier = {
		trigger = resource_income_compare
		trigger_scope = owner
		parameters = {
			resource = sr_living_metal
		}
		mode = add
		mult = 20
	}
	complex_trigger_modifier = {
		trigger = resource_income_compare
		trigger_scope = owner
		parameters = {
			resource = sr_zro
		}
		mode = add
		mult = 20
	}
	complex_trigger_modifier = {
		trigger = resource_income_compare
		trigger_scope = owner
		parameters = {
			resource = sr_dark_matter
		}
		mode = add
		mult = 20
	}
}

RELATIVE_POWER_ECONOMY_OVERLORD = {
	base = 3
	mult = owner.value:RELATIVE_POWER_ECONOMY_OVERLORD_base
	divide = owner.overlord.value:RELATIVE_POWER_ECONOMY_OVERLORD_base
	mult = owner.value:RELATIVE_POWER_ECONOMY_OVERLORD_base
	divide = owner.overlord.value:RELATIVE_POWER_ECONOMY_OVERLORD_base
}

count_job = {
	base = 0
	complex_trigger_modifier = {
		trigger = count_owned_pop
		parameters = {
			limit = { has_job = $JOB$ }
		}
		mode = add
	}
}
gaiaseeder_upkeep_machine = {
	base = 1.50
	modifier = {
		add = -0.50
		any_galaxy_species = {
			has_species_flag = original_organic_species_of_@prev.owner
			prev = {
				is_ideal_planet_class = {
					who = prev
					status = yes
				}
			}
		}
	}
	modifier = {
		add = -0.25
		OR = {
			AND = {
				any_galaxy_species = {
					has_species_flag = original_organic_species_of_@prev.owner
					ideal_planet_is_wet = yes
				}
				planet = {
					is_wet = yes
					any_galaxy_species = {
						has_species_flag = original_organic_species_of_@prev.owner
						prev = {
							is_ideal_planet_class = {
								who = prev
								status = no
							}
						}
					}
				}
			}
			AND = {
				any_galaxy_species = {
					has_species_flag = original_organic_species_of_@prev.owner
					ideal_planet_is_dry = yes
				}
				planet = {
					is_dry = yes
					any_galaxy_species = {
						has_species_flag = original_organic_species_of_@prev.owner
						prev = {
							is_ideal_planet_class = {
								who = prev
								status = no
							}
						}
					}
				}
			}
			AND = {
				any_galaxy_species = {
					has_species_flag = original_organic_species_of_@prev.owner
					ideal_planet_is_cold = yes
				}
				planet = {
					is_cold = yes
					any_galaxy_species = {
						has_species_flag = original_organic_species_of_@prev.owner
						prev = {
							is_ideal_planet_class = {
								who = prev
								status = no
							}
						}
					}
				}
			}
		}
	}
	modifier = {
		add = 0.25
		planet = { is_planet_class = pc_nuked }
	}
}

overlord_gaiaseeder_upkeep_machine = {
	base = 1.50
	modifier = {
		add = -0.50
		any_galaxy_species = {
			has_species_flag = original_organic_species_of_@prev.owner.overlord
			prev.planet = {
				is_ideal_planet_class = {
					who = prev
					status = yes
				}
			}
		}
	}
	modifier = {
		add = -0.25
		OR = {
			AND = {
				any_galaxy_species = {
					has_species_flag = original_organic_species_of_@prev.owner.overlord
					ideal_planet_is_wet = yes
				}
				planet = {
					is_wet = yes
					any_galaxy_species = {
						has_species_flag = original_organic_species_of_@prev.owner.overlord
						prev = {
							is_ideal_planet_class = {
								who = prev
								status = no
							}
						}
					}
				}
			}
			AND = {
				any_galaxy_species = {
					has_species_flag = original_organic_species_of_@prev.owner.overlord
					ideal_planet_is_dry = yes
				}
				planet = {
					is_dry = yes
					any_galaxy_species = {
						has_species_flag = original_organic_species_of_@prev.owner.overlord
						prev = {
							is_ideal_planet_class = {
								who = prev
								status = no
							}
						}
					}
				}
			}
			AND = {
				any_galaxy_species = {
					has_species_flag = original_organic_species_of_@prev.owner.overlord
					ideal_planet_is_cold = yes
				}
				planet = {
					is_cold = yes
					any_galaxy_species = {
						has_species_flag = original_organic_species_of_@prev.owner.overlord
						prev = {
							is_ideal_planet_class = {
								who = prev
								status = no
							}
						}
					}
				}
			}
		}
	}
	modifier = {
		add = 0.25
		planet = { is_planet_class = pc_nuked }
	}
}

society_num_pops = {
	base = 0
	add = trigger:num_pops
}
society_factor_pops = {
	base = 1
	divide = society_num_pops
}

society_stability_original = {
	base = 0
	add = modifier:planet_stability_add
	add = society_stability_sub
}
society_stability_target = {
	base = 1
	add = modifier:planet_stability_mult
	mult = society_stability_original
}
society_stability_sub = {
	base = 0
	add = society_stability_original
	subtract = society_stability_target
}

society_crime_factor = {
	base = 1
	add = modifier:planet_crime_mult
	mult = trigger:num_pops
	mult = 0.02
}
society_crime_rate_changer = {
	base = 0
	add = trigger:planet_crime
	subtract = society_crime_rate
	modifier = {
		divide = society_crime_factor
		check_variable = { which = society_crime_factor value > 1 }
	}
	divide = 2
}
society_crime_rate = {
	base = 0
	add = society_crime_rate
	add = society_crime_rate_changer
}
society_crime_rate_sub = {
	base = 0.02
	mult = trigger:num_pops
	mult = society_crime_rate
}

society_amenities_original = {
	base = 0
	add = modifier:planet_amenities_add
	add = society_amenities_sub
}
society_amenities_target = {
	base = 1
	subtract = modifier:planet_amenities_reduction
	mult = society_amenities_original
}
society_amenities_sub = {
	base = 0
	add = society_amenities_original
	subtract = society_amenities_target
}

society_trade_value_original = {
	base = 0
	add = modifier:trade_value_add
	add = society_trade_value_sub
}
society_trade_value_target = {
	base = 1
	subtract = modifier:trade_value_reduction
	mult = society_trade_value_original
}
society_trade_value_sub = {
	base = 0
	add = society_trade_value_original
	subtract = society_trade_value_target
}

society_branch_value_original = {
	base = 0
	add = modifier:branch_office_value_mult
	add = society_branch_value_sub
}
society_branch_value_target = {
	base = 0
	#subtract = modifier:trade_value_reduction
	#mult = society_trade_value_original
}
society_branch_value_sub = {
	base = 0
	add = society_branch_value_original
	subtract = society_branch_value_target
}

society_family_structure = {
	base = 0
	add = modifier:pop_family_structure_growth_mult
}

count_type_mult = {
	base = 1
	complex_trigger_modifier = {
		trigger = count_owned_pop
		parameters = {
			limit = { has_job = $JOB$ }
		}
		mode = add
		mult = 0.25
	}
}

count_building = {
	base = 0
	complex_trigger_modifier = {
		trigger = num_buildings
		parameters = {
			type = $BUILDING$
		}
		mode = add
	}
}

num_ethic_commandante_to_knight_commander_variable_1 = {
	base = 0
	complex_trigger_modifier = {
		trigger = check_modifier_value
		parameters = {
			modifier = job_commandante_add
		}
		multiplier = 1
		mode = add
	}
}
num_ethic_commandante_to_knight_commander_variable_2 = {
	base = 0
	complex_trigger_modifier = {
		trigger = check_modifier_value
		parameters = {
			modifier = job_commandante_per_pop
		}
		multiplier = 1
		mode = add
	}
}

num_ethic_wizarding_world_legendary_mage_variable_1 = {
	base = 0
	complex_trigger_modifier = {
		trigger = check_modifier_value
		parameters = {
			modifier = job_head_researcher_add
		}
		multiplier = 1
		mode = add
	}
}
num_ethic_wizarding_world_legendary_mage_variable_2 = {
	base = 0
	complex_trigger_modifier = {
		trigger = check_modifier_value
		parameters = {
			modifier = job_head_researcher_per_pop
		}
		multiplier = 1
		mode = add
	}
}

num_ethic_wizarding_world_magician_variable_1 = {
	base = 0
	complex_trigger_modifier = {
		trigger = check_modifier_value
		parameters = {
			modifier = job_researcher_add
		}
		multiplier = 1
		mode = add
	}
}
num_ethic_wizarding_world_magician_variable_2 = {
	base = 0
	complex_trigger_modifier = {
		trigger = check_modifier_value
		parameters = {
			modifier = job_researcher_per_pop
		}
		multiplier = 1
		mode = add
	}
}

num_ethic_not_rulers_society_researcher_variable_1 = {
	base = 0
	complex_trigger_modifier = {
		trigger = check_modifier_value
		parameters = {
			modifier = job_head_researcher_add
		}
		multiplier = 1
		mode = add
	}
}
num_ethic_not_rulers_society_researcher_variable_2 = {
	base = 0
	complex_trigger_modifier = {
		trigger = check_modifier_value
		parameters = {
			modifier = job_head_researcher_per_pop
		}
		multiplier = 1
		mode = add
	}
}

negative_support = {
	base = 1
	complex_trigger_modifier = {
		mode = subtract
		trigger = pop_percentage
		parameters = {
			limit = {
				OR = {
					AND = {
						has_ethic = ethic_egalitarian
						root = {
							OR = {
								is_pop_faction_type = progressive
								is_pop_faction_type = entrepreneurs
								is_pop_faction_type = manifesti
							}
						}
					}
					AND = {
						has_ethic = ethic_authoritarian
						root = {
							OR = {
								is_pop_faction_type = totalitarian
								is_pop_faction_type = civil_official
							}
						}
					}
					AND = {
						has_ethic = ethic_socialism
						root = {
							OR = {
								is_pop_faction_type = socialists
								is_pop_faction_type = pioneer
							}
						}
					}
					AND = {
						has_ethic = ethic_capitalism
						root = {
							OR = {
								is_pop_faction_type = industrialist
								is_pop_faction_type = bankers
							}
						}
					}
					AND = {
						has_ethic = ethic_materialist
						root = {
							OR = {
								is_pop_faction_type = secular
								is_pop_faction_type = traditionalist
							}
						}
					}
					AND = {
						has_ethic = ethic_spiritualist
						root = {
							OR = {
								is_pop_faction_type = secular
								is_pop_faction_type = traditionalist
							}
						}
					}
					AND = {
						has_ethic = ethic_xenophile
						root = {
							OR = {
								is_pop_faction_type = proletarians
								is_pop_faction_type = xenoist
							}
						}
					}
					AND = {
						has_ethic = ethic_pacifist
						root = {
							OR = {
								is_pop_faction_type = prosperity
								is_pop_faction_type = philosopher
							}
						}
					}
					AND = {
						has_ethic = ethic_militarist
						root = {
							OR = {
								is_pop_faction_type = revolutionary
								is_pop_faction_type = imperialist
							}
						}
					}
					AND = {
						has_ethic = ethic_green
						root = {
							is_pop_faction_type = environmentalists
						}
					}
					AND = {
						has_ethic = ethic_industrial
						root = {
							is_pop_faction_type = manufacturers
						}
					}
				}
			}
		}
	}
}

num_planetary_ascension_effect_mult = {
	base = 0
	complex_trigger_modifier = {
		trigger = check_modifier_value
		parameters = {
			modifier = planetary_ascension_effect_mult
		}
		multiplier = 1
		mode = add
	}
}

num_ethic_planetary_ascension_tier = {
	base = 0
	add = trigger:has_planetary_ascension_tier
	mult = value:num_planetary_ascension_effect_mult
}

num_districts_value = {
	base = 0
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = $DISTRICT$
		}
		mode = add
	}
}

empire_size_councilor_slaver_guilds = {
	base = 1
	mult = value:councilor_level|TYPE|councilor_slaver_guilds|
	mult = -0.02
}

leader_cap_add = {
	base = 0
	complex_trigger_modifier = {
		trigger = check_modifier_value
		parameters = {
			modifier = country_leader_cap_add
		}
		multiplier = 1
		mode = add
	}
}

learder_cap_nums = {
	base = 10
	add = value:leader_cap_add
	min = 0
}

num_species_leader_exp_gain = {
	base = 0
	complex_trigger_modifier = {
		trigger = check_modifier_value
		parameters = {
			modifier = species_leader_exp_gain
		}
		multiplier = 1
		mode = add
	}
}

	base = 0

	mult = value:num_species_leader_exp_gain

	complex_trigger_modifier = {
		trigger = count_owned_pop
		parameters = {
			limit = {
				is_researcher = yes
			}
		}
		mode = add
		mult = 1.1
	}

	modifier = {
		mult = 1.25
		has_trait = trait_industrious
	}
	modifier = {
		mult = 0.33
		has_trait = trait_indolent
	}

	modifier = {
		mult = 1.25
		has_trait = trait_quick_learners
	}
	modifier = {
		mult = 0.33
		has_trait = trait_slow_learners
	}

	modifier = {
		mult = 1.5
		has_trait = trait_intelligent
	}
	modifier = {
		mult = 0.1
		has_trait = trait_unsophisticated
	}

	modifier = {
		mult = 1.15
		has_trait = trait_natural_engineers
	}
	modifier = {
		mult = 1.15
		has_trait = trait_natural_physicists
	}
	modifier = {
		mult = 1.15
		has_trait = trait_natural_sociologists
	}

	modifier = {
		mult = 1.25
		has_trait = trait_talented
	}

	modifier = {
		mult = 1.25
		has_trait = trait_enigmatic_intelligence
	}
	modifier = {
		mult = 1.05
		has_trait = trait_enigmatic_intelligence_poor
	}
	modifier = {
		mult = 0.5
		has_trait = trait_enigmatic_intelligence_failed
	}

	min = 0

mogul_produces_value = {
	complex_trigger_modifier = {
		trigger = count_owned_pop
		parameters = {
			limit = { has_job = merchant }
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_owned_pop
		parameters = {
			limit = { has_job = manager }
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_owned_pop
		parameters = {
			limit = { has_job = shopkeeper }
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_owned_pop
		parameters = {
			limit = { has_job = clerk }
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_owned_pop
		potential = {
			has_civic = civic_eternal_jihad
		}
		parameters = {
			limit = { has_job = entertainer }
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_owned_pop
		potential = {
			has_civic = civic_eternal_jihad
		}
		parameters = {
			limit = { has_job = duelist }
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_owned_pop
		potential = {
			has_civic = civic_eternal_jihad
		}
		parameters = {
			limit = { has_job = professional_star_fans }
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_owned_pop
		potential = {
			has_civic = civic_glory_and_dream
		}
		parameters = {
			limit = { has_job = enforcer }
		}
		mode = add
	}
	mult = value:scripted_modifier_mult|MODIFIER|pop_job_trade_mult|
}